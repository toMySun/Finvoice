#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated  by generateDS.py.
# Python 3.5.2 (default, Sep 14 2017, 22:51:06)  [GCC 5.4.0 20160609]
#
# Command line options:
#   ('-s', 'finvoice/attachment/attachmentsubs.py')
#   ('-o', 'finvoice/attachment/attachment.py')
#   ('--super', 'finvoice.attachment.attachment')
#   ('--external-encoding', 'iso8859-15')
#   ('--no-dates', '')
#   ('--no-versions', '')
#
# Command line arguments:
#   xsd/FinvoiceAttachments.xsd
#
# Command line:
#   /home/aisopuro/.virtualenvs/py-finvoice/bin/generateDS.py -s "finvoice/attachment/attachmentsubs.py" -o "finvoice/attachment/attachment.py" --super="finvoice.attachment.attachment" --external-encoding="iso8859-15" --no-dates --no-versions xsd/FinvoiceAttachments.xsd
#
# Current working directory (os.getcwd()):
#   py-finvoice
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'iso8859-15'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class FinvoiceAttachments(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, Version=None, MessageTransmissionDetails=None, AttachmentDetails=None):
        self.original_tagname_ = None
        self.Version = _cast(None, Version)
        self.MessageTransmissionDetails = MessageTransmissionDetails
        if AttachmentDetails is None:
            self.AttachmentDetails = []
        else:
            self.AttachmentDetails = AttachmentDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FinvoiceAttachments)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FinvoiceAttachments.subclass:
            return FinvoiceAttachments.subclass(*args_, **kwargs_)
        else:
            return FinvoiceAttachments(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MessageTransmissionDetails(self): return self.MessageTransmissionDetails
    def set_MessageTransmissionDetails(self, MessageTransmissionDetails): self.MessageTransmissionDetails = MessageTransmissionDetails
    def get_AttachmentDetails(self): return self.AttachmentDetails
    def set_AttachmentDetails(self, AttachmentDetails): self.AttachmentDetails = AttachmentDetails
    def add_AttachmentDetails(self, value): self.AttachmentDetails.append(value)
    def insert_AttachmentDetails_at(self, index, value): self.AttachmentDetails.insert(index, value)
    def replace_AttachmentDetails_at(self, index, value): self.AttachmentDetails[index] = value
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def hasContent_(self):
        if (
            self.MessageTransmissionDetails is not None or
            self.AttachmentDetails
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FinvoiceAttachments', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FinvoiceAttachments')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FinvoiceAttachments')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='FinvoiceAttachments', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FinvoiceAttachments'):
        if self.Version is not None and 'Version' not in already_processed:
            already_processed.add('Version')
            outfile.write(' Version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Version), input_name='Version')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='FinvoiceAttachments', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MessageTransmissionDetails is not None:
            self.MessageTransmissionDetails.export(outfile, level, namespace_, name_='MessageTransmissionDetails', pretty_print=pretty_print)
        for AttachmentDetails_ in self.AttachmentDetails:
            AttachmentDetails_.export(outfile, level, namespace_, name_='AttachmentDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Version', node)
        if value is not None and 'Version' not in already_processed:
            already_processed.add('Version')
            self.Version = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MessageTransmissionDetails':
            obj_ = MessageTransmissionDetailsType.factory()
            obj_.build(child_)
            self.MessageTransmissionDetails = obj_
            obj_.original_tagname_ = 'MessageTransmissionDetails'
        elif nodeName_ == 'AttachmentDetails':
            obj_ = AttachmentDetailsType.factory()
            obj_.build(child_)
            self.AttachmentDetails.append(obj_)
            obj_.original_tagname_ = 'AttachmentDetails'
# end class FinvoiceAttachments


class MessageTransmissionDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MessageSenderDetails=None, MessageReceiverDetails=None, MessageDetails=None):
        self.original_tagname_ = None
        self.MessageSenderDetails = MessageSenderDetails
        self.MessageReceiverDetails = MessageReceiverDetails
        self.MessageDetails = MessageDetails
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MessageTransmissionDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MessageTransmissionDetailsType.subclass:
            return MessageTransmissionDetailsType.subclass(*args_, **kwargs_)
        else:
            return MessageTransmissionDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MessageSenderDetails(self): return self.MessageSenderDetails
    def set_MessageSenderDetails(self, MessageSenderDetails): self.MessageSenderDetails = MessageSenderDetails
    def get_MessageReceiverDetails(self): return self.MessageReceiverDetails
    def set_MessageReceiverDetails(self, MessageReceiverDetails): self.MessageReceiverDetails = MessageReceiverDetails
    def get_MessageDetails(self): return self.MessageDetails
    def set_MessageDetails(self, MessageDetails): self.MessageDetails = MessageDetails
    def hasContent_(self):
        if (
            self.MessageSenderDetails is not None or
            self.MessageReceiverDetails is not None or
            self.MessageDetails is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MessageTransmissionDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MessageTransmissionDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MessageTransmissionDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MessageTransmissionDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MessageTransmissionDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MessageTransmissionDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MessageSenderDetails is not None:
            self.MessageSenderDetails.export(outfile, level, namespace_, name_='MessageSenderDetails', pretty_print=pretty_print)
        if self.MessageReceiverDetails is not None:
            self.MessageReceiverDetails.export(outfile, level, namespace_, name_='MessageReceiverDetails', pretty_print=pretty_print)
        if self.MessageDetails is not None:
            self.MessageDetails.export(outfile, level, namespace_, name_='MessageDetails', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MessageSenderDetails':
            obj_ = MessageSenderDetailsType.factory()
            obj_.build(child_)
            self.MessageSenderDetails = obj_
            obj_.original_tagname_ = 'MessageSenderDetails'
        elif nodeName_ == 'MessageReceiverDetails':
            obj_ = MessageReceiverDetailsType.factory()
            obj_.build(child_)
            self.MessageReceiverDetails = obj_
            obj_.original_tagname_ = 'MessageReceiverDetails'
        elif nodeName_ == 'MessageDetails':
            obj_ = MessageDetailsType.factory()
            obj_.build(child_)
            self.MessageDetails = obj_
            obj_.original_tagname_ = 'MessageDetails'
# end class MessageTransmissionDetailsType


class AttachmentDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, AttachmentIdentifier=None, AttachmentContent=None, AttachmentName=None, AttachmentSecurityClass=None, AttachmentMimeType=None, AttachmentSecureHash=None):
        self.original_tagname_ = None
        self.AttachmentIdentifier = AttachmentIdentifier
        self.validate_genericStringType56_103(self.AttachmentIdentifier)
        self.AttachmentContent = AttachmentContent
        self.AttachmentName = AttachmentName
        self.validate_genericStringType3_50(self.AttachmentName)
        self.AttachmentSecurityClass = AttachmentSecurityClass
        self.validate_SecurityClassType(self.AttachmentSecurityClass)
        self.AttachmentMimeType = AttachmentMimeType
        self.validate_genericStringType1_80(self.AttachmentMimeType)
        self.AttachmentSecureHash = AttachmentSecureHash
        self.validate_genericStringType40(self.AttachmentSecureHash)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, AttachmentDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if AttachmentDetailsType.subclass:
            return AttachmentDetailsType.subclass(*args_, **kwargs_)
        else:
            return AttachmentDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_AttachmentIdentifier(self): return self.AttachmentIdentifier
    def set_AttachmentIdentifier(self, AttachmentIdentifier): self.AttachmentIdentifier = AttachmentIdentifier
    def get_AttachmentContent(self): return self.AttachmentContent
    def set_AttachmentContent(self, AttachmentContent): self.AttachmentContent = AttachmentContent
    def get_AttachmentName(self): return self.AttachmentName
    def set_AttachmentName(self, AttachmentName): self.AttachmentName = AttachmentName
    def get_AttachmentSecurityClass(self): return self.AttachmentSecurityClass
    def set_AttachmentSecurityClass(self, AttachmentSecurityClass): self.AttachmentSecurityClass = AttachmentSecurityClass
    def get_AttachmentMimeType(self): return self.AttachmentMimeType
    def set_AttachmentMimeType(self, AttachmentMimeType): self.AttachmentMimeType = AttachmentMimeType
    def get_AttachmentSecureHash(self): return self.AttachmentSecureHash
    def set_AttachmentSecureHash(self, AttachmentSecureHash): self.AttachmentSecureHash = AttachmentSecureHash
    def validate_genericStringType56_103(self, value):
        # Validate type genericStringType56_103, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 103:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType56_103' % {"value" : value.encode("utf-8")} )
            if len(value) < 56:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType56_103' % {"value" : value.encode("utf-8")} )
    def validate_genericStringType3_50(self, value):
        # Validate type genericStringType3_50, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 50:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType3_50' % {"value" : value.encode("utf-8")} )
            if len(value) < 3:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType3_50' % {"value" : value.encode("utf-8")} )
    def validate_SecurityClassType(self, value):
        # Validate type SecurityClassType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            if not self.gds_validate_simple_patterns(
                    self.validate_SecurityClassType_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_SecurityClassType_patterns_, ))
    validate_SecurityClassType_patterns_ = [['^SEI[0-9]{2}$']]
    def validate_genericStringType1_80(self, value):
        # Validate type genericStringType1_80, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 80:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType1_80' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType1_80' % {"value" : value.encode("utf-8")} )
    def validate_genericStringType40(self, value):
        # Validate type genericStringType40, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) != 40:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on genericStringType40' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.AttachmentIdentifier is not None or
            self.AttachmentContent is not None or
            self.AttachmentName is not None or
            self.AttachmentSecurityClass is not None or
            self.AttachmentMimeType is not None or
            self.AttachmentSecureHash is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='AttachmentDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('AttachmentDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='AttachmentDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='AttachmentDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='AttachmentDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='AttachmentDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.AttachmentIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttachmentIdentifier>%s</%sAttachmentIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AttachmentIdentifier), input_name='AttachmentIdentifier')), namespace_, eol_))
        if self.AttachmentContent is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttachmentContent>%s</%sAttachmentContent>%s' % (namespace_, self.gds_format_base64(self.AttachmentContent, input_name='AttachmentContent'), namespace_, eol_))
        if self.AttachmentName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttachmentName>%s</%sAttachmentName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AttachmentName), input_name='AttachmentName')), namespace_, eol_))
        if self.AttachmentSecurityClass is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttachmentSecurityClass>%s</%sAttachmentSecurityClass>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AttachmentSecurityClass), input_name='AttachmentSecurityClass')), namespace_, eol_))
        if self.AttachmentMimeType is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttachmentMimeType>%s</%sAttachmentMimeType>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AttachmentMimeType), input_name='AttachmentMimeType')), namespace_, eol_))
        if self.AttachmentSecureHash is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sAttachmentSecureHash>%s</%sAttachmentSecureHash>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.AttachmentSecureHash), input_name='AttachmentSecureHash')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'AttachmentIdentifier':
            AttachmentIdentifier_ = child_.text
            AttachmentIdentifier_ = self.gds_validate_string(AttachmentIdentifier_, node, 'AttachmentIdentifier')
            self.AttachmentIdentifier = AttachmentIdentifier_
            # validate type genericStringType56_103
            self.validate_genericStringType56_103(self.AttachmentIdentifier)
        elif nodeName_ == 'AttachmentContent':
            sval_ = child_.text
            if sval_ is not None:
                try:
                    bval_ = base64.b64decode(sval_)
                except (TypeError, ValueError) as exp:
                    raise_parse_error(child_, 'requires base64 encoded string: %s' % exp)
                bval_ = self.gds_validate_base64(bval_, node, 'AttachmentContent')
            else:
                bval_ = None
            self.AttachmentContent = bval_
        elif nodeName_ == 'AttachmentName':
            AttachmentName_ = child_.text
            AttachmentName_ = self.gds_validate_string(AttachmentName_, node, 'AttachmentName')
            self.AttachmentName = AttachmentName_
            # validate type genericStringType3_50
            self.validate_genericStringType3_50(self.AttachmentName)
        elif nodeName_ == 'AttachmentSecurityClass':
            AttachmentSecurityClass_ = child_.text
            AttachmentSecurityClass_ = self.gds_validate_string(AttachmentSecurityClass_, node, 'AttachmentSecurityClass')
            self.AttachmentSecurityClass = AttachmentSecurityClass_
            # validate type SecurityClassType
            self.validate_SecurityClassType(self.AttachmentSecurityClass)
        elif nodeName_ == 'AttachmentMimeType':
            AttachmentMimeType_ = child_.text
            AttachmentMimeType_ = self.gds_validate_string(AttachmentMimeType_, node, 'AttachmentMimeType')
            self.AttachmentMimeType = AttachmentMimeType_
            # validate type genericStringType1_80
            self.validate_genericStringType1_80(self.AttachmentMimeType)
        elif nodeName_ == 'AttachmentSecureHash':
            AttachmentSecureHash_ = child_.text
            AttachmentSecureHash_ = self.gds_validate_string(AttachmentSecureHash_, node, 'AttachmentSecureHash')
            self.AttachmentSecureHash = AttachmentSecureHash_
            # validate type genericStringType40
            self.validate_genericStringType40(self.AttachmentSecureHash)
# end class AttachmentDetailsType


class MessageSenderDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, FromIdentifier=None, FromIntermediator=None):
        self.original_tagname_ = None
        self.FromIdentifier = FromIdentifier
        self.validate_genericStringType2_35(self.FromIdentifier)
        self.FromIntermediator = FromIntermediator
        self.validate_genericStringType2_35(self.FromIntermediator)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MessageSenderDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MessageSenderDetailsType.subclass:
            return MessageSenderDetailsType.subclass(*args_, **kwargs_)
        else:
            return MessageSenderDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_FromIdentifier(self): return self.FromIdentifier
    def set_FromIdentifier(self, FromIdentifier): self.FromIdentifier = FromIdentifier
    def get_FromIntermediator(self): return self.FromIntermediator
    def set_FromIntermediator(self, FromIntermediator): self.FromIntermediator = FromIntermediator
    def validate_genericStringType2_35(self, value):
        # Validate type genericStringType2_35, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType2_35' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType2_35' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.FromIdentifier is not None or
            self.FromIntermediator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MessageSenderDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MessageSenderDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MessageSenderDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MessageSenderDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MessageSenderDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MessageSenderDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.FromIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFromIdentifier>%s</%sFromIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FromIdentifier), input_name='FromIdentifier')), namespace_, eol_))
        if self.FromIntermediator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sFromIntermediator>%s</%sFromIntermediator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.FromIntermediator), input_name='FromIntermediator')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'FromIdentifier':
            FromIdentifier_ = child_.text
            FromIdentifier_ = self.gds_validate_string(FromIdentifier_, node, 'FromIdentifier')
            self.FromIdentifier = FromIdentifier_
            # validate type genericStringType2_35
            self.validate_genericStringType2_35(self.FromIdentifier)
        elif nodeName_ == 'FromIntermediator':
            FromIntermediator_ = child_.text
            FromIntermediator_ = self.gds_validate_string(FromIntermediator_, node, 'FromIntermediator')
            self.FromIntermediator = FromIntermediator_
            # validate type genericStringType2_35
            self.validate_genericStringType2_35(self.FromIntermediator)
# end class MessageSenderDetailsType


class MessageReceiverDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, ToIdentifier=None, ToIntermediator=None):
        self.original_tagname_ = None
        self.ToIdentifier = ToIdentifier
        self.validate_genericStringType2_35(self.ToIdentifier)
        self.ToIntermediator = ToIntermediator
        self.validate_genericStringType2_35(self.ToIntermediator)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MessageReceiverDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MessageReceiverDetailsType.subclass:
            return MessageReceiverDetailsType.subclass(*args_, **kwargs_)
        else:
            return MessageReceiverDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_ToIdentifier(self): return self.ToIdentifier
    def set_ToIdentifier(self, ToIdentifier): self.ToIdentifier = ToIdentifier
    def get_ToIntermediator(self): return self.ToIntermediator
    def set_ToIntermediator(self, ToIntermediator): self.ToIntermediator = ToIntermediator
    def validate_genericStringType2_35(self, value):
        # Validate type genericStringType2_35, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType2_35' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType2_35' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.ToIdentifier is not None or
            self.ToIntermediator is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MessageReceiverDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MessageReceiverDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MessageReceiverDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MessageReceiverDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MessageReceiverDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MessageReceiverDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.ToIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sToIdentifier>%s</%sToIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ToIdentifier), input_name='ToIdentifier')), namespace_, eol_))
        if self.ToIntermediator is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sToIntermediator>%s</%sToIntermediator>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ToIntermediator), input_name='ToIntermediator')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'ToIdentifier':
            ToIdentifier_ = child_.text
            ToIdentifier_ = self.gds_validate_string(ToIdentifier_, node, 'ToIdentifier')
            self.ToIdentifier = ToIdentifier_
            # validate type genericStringType2_35
            self.validate_genericStringType2_35(self.ToIdentifier)
        elif nodeName_ == 'ToIntermediator':
            ToIntermediator_ = child_.text
            ToIntermediator_ = self.gds_validate_string(ToIntermediator_, node, 'ToIntermediator')
            self.ToIntermediator = ToIntermediator_
            # validate type genericStringType2_35
            self.validate_genericStringType2_35(self.ToIntermediator)
# end class MessageReceiverDetailsType


class MessageDetailsType(GeneratedsSuper):
    subclass = None
    superclass = None
    def __init__(self, MessageIdentifier=None, MessageTimeStamp=None, RefToMessageIdentifier=None):
        self.original_tagname_ = None
        self.MessageIdentifier = MessageIdentifier
        self.validate_genericStringType15_61(self.MessageIdentifier)
        self.MessageTimeStamp = MessageTimeStamp
        self.validate_genericStringType2_35(self.MessageTimeStamp)
        self.RefToMessageIdentifier = RefToMessageIdentifier
        self.validate_genericStringType2_48(self.RefToMessageIdentifier)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MessageDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MessageDetailsType.subclass:
            return MessageDetailsType.subclass(*args_, **kwargs_)
        else:
            return MessageDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MessageIdentifier(self): return self.MessageIdentifier
    def set_MessageIdentifier(self, MessageIdentifier): self.MessageIdentifier = MessageIdentifier
    def get_MessageTimeStamp(self): return self.MessageTimeStamp
    def set_MessageTimeStamp(self, MessageTimeStamp): self.MessageTimeStamp = MessageTimeStamp
    def get_RefToMessageIdentifier(self): return self.RefToMessageIdentifier
    def set_RefToMessageIdentifier(self, RefToMessageIdentifier): self.RefToMessageIdentifier = RefToMessageIdentifier
    def validate_genericStringType15_61(self, value):
        # Validate type genericStringType15_61, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 61:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType15_61' % {"value" : value.encode("utf-8")} )
            if len(value) < 15:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType15_61' % {"value" : value.encode("utf-8")} )
    def validate_genericStringType2_35(self, value):
        # Validate type genericStringType2_35, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType2_35' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType2_35' % {"value" : value.encode("utf-8")} )
    def validate_genericStringType2_48(self, value):
        # Validate type genericStringType2_48, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 48:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType2_48' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType2_48' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MessageIdentifier is not None or
            self.MessageTimeStamp is not None or
            self.RefToMessageIdentifier is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MessageDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MessageDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MessageDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MessageDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MessageDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MessageDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MessageIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessageIdentifier>%s</%sMessageIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MessageIdentifier), input_name='MessageIdentifier')), namespace_, eol_))
        if self.MessageTimeStamp is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessageTimeStamp>%s</%sMessageTimeStamp>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MessageTimeStamp), input_name='MessageTimeStamp')), namespace_, eol_))
        if self.RefToMessageIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sRefToMessageIdentifier>%s</%sRefToMessageIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.RefToMessageIdentifier), input_name='RefToMessageIdentifier')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MessageIdentifier':
            MessageIdentifier_ = child_.text
            MessageIdentifier_ = self.gds_validate_string(MessageIdentifier_, node, 'MessageIdentifier')
            self.MessageIdentifier = MessageIdentifier_
            # validate type genericStringType15_61
            self.validate_genericStringType15_61(self.MessageIdentifier)
        elif nodeName_ == 'MessageTimeStamp':
            MessageTimeStamp_ = child_.text
            MessageTimeStamp_ = self.gds_validate_string(MessageTimeStamp_, node, 'MessageTimeStamp')
            self.MessageTimeStamp = MessageTimeStamp_
            # validate type genericStringType2_35
            self.validate_genericStringType2_35(self.MessageTimeStamp)
        elif nodeName_ == 'RefToMessageIdentifier':
            RefToMessageIdentifier_ = child_.text
            RefToMessageIdentifier_ = self.gds_validate_string(RefToMessageIdentifier_, node, 'RefToMessageIdentifier')
            self.RefToMessageIdentifier = RefToMessageIdentifier_
            # validate type genericStringType2_48
            self.validate_genericStringType2_48(self.RefToMessageIdentifier)
# end class MessageDetailsType


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FinvoiceAttachments'
        rootClass = FinvoiceAttachments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FinvoiceAttachments'
        rootClass = FinvoiceAttachments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FinvoiceAttachments'
        rootClass = FinvoiceAttachments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FinvoiceAttachments'
        rootClass = FinvoiceAttachments
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from attachment import *\n\n')
        sys.stdout.write('import attachment as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "AttachmentDetailsType",
    "FinvoiceAttachments",
    "MessageDetailsType",
    "MessageReceiverDetailsType",
    "MessageSenderDetailsType",
    "MessageTransmissionDetailsType"
]
