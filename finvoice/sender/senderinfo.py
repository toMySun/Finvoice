#!/usr/bin/env python
# -*- coding: utf-8 -*-

#
# Generated  by generateDS.py.
# Python 3.5.2 (default, Sep 14 2017, 22:51:06)  [GCC 5.4.0 20160609]
#
# Command line options:
#   ('-s', 'finvoice/sender/senderinfosubs.py')
#   ('-o', 'finvoice/sender/senderinfo.py')
#   ('--super', 'finvoice.sender.senderinfo')
#   ('--external-encoding', 'iso8859-15')
#   ('--no-dates', '')
#   ('--no-versions', '')
#   ('--validator-bodies', 'stubs/validator/sender/senderinfo/')
#   ('--user-methods', 'generators.gends_user_methods_senderinfo')
#
# Command line arguments:
#   xsd/FinvoiceSenderInfo.xsd
#
# Command line:
#   /home/aisopuro/.virtualenvs/py-finvoice/bin/generateDS.py -s "finvoice/sender/senderinfosubs.py" -o "finvoice/sender/senderinfo.py" --super="finvoice.sender.senderinfo" --external-encoding="iso8859-15" --no-dates --no-versions --validator-bodies="stubs/validator/sender/senderinfo/" --user-methods="generators.gends_user_methods_senderinfo" xsd/FinvoiceSenderInfo.xsd
#
# Current working directory (os.getcwd()):
#   py-finvoice
#

import sys
import re as re_
import base64
import datetime as datetime_
import warnings as warnings_
try:
    from lxml import etree as etree_
except ImportError:
    from xml.etree import ElementTree as etree_


Validate_simpletypes_ = True
if sys.version_info.major == 2:
    BaseStrType_ = basestring
else:
    BaseStrType_ = str


def parsexml_(infile, parser=None, **kwargs):
    if parser is None:
        # Use the lxml ElementTree compatible parser so that, e.g.,
        #   we ignore comments.
        try:
            parser = etree_.ETCompatXMLParser()
        except AttributeError:
            # fallback to xml.etree
            parser = etree_.XMLParser()
    doc = etree_.parse(infile, parser=parser, **kwargs)
    return doc

#
# Namespace prefix definition table (and other attributes, too)
#
# The module generatedsnamespaces, if it is importable, must contain
# a dictionary named GeneratedsNamespaceDefs.  This Python dictionary
# should map element type names (strings) to XML schema namespace prefix
# definitions.  The export method for any class for which there is
# a namespace prefix definition, will export that definition in the
# XML representation of that element.  See the export method of
# any generated element type class for a example of the use of this
# table.
# A sample table is:
#
#     # File: generatedsnamespaces.py
#
#     GenerateDSNamespaceDefs = {
#         "ElementtypeA": "http://www.xxx.com/namespaceA",
#         "ElementtypeB": "http://www.xxx.com/namespaceB",
#     }
#

try:
    from generatedsnamespaces import GenerateDSNamespaceDefs as GenerateDSNamespaceDefs_
except ImportError:
    GenerateDSNamespaceDefs_ = {}

#
# The root super-class for element type classes
#
# Calls to the methods in these classes are generated by generateDS.py.
# You can replace these methods by re-implementing the following class
#   in a module named generatedssuper.py.

try:
    from generatedssuper import GeneratedsSuper
except ImportError as exp:
    
    class GeneratedsSuper(object):
        tzoff_pattern = re_.compile(r'(\+|-)((0\d|1[0-3]):[0-5]\d|14:00)$')
        class _FixedOffsetTZ(datetime_.tzinfo):
            def __init__(self, offset, name):
                self.__offset = datetime_.timedelta(minutes=offset)
                self.__name = name
            def utcoffset(self, dt):
                return self.__offset
            def tzname(self, dt):
                return self.__name
            def dst(self, dt):
                return None
        def gds_format_string(self, input_data, input_name=''):
            return input_data
        def gds_validate_string(self, input_data, node=None, input_name=''):
            if not input_data:
                return ''
            else:
                return input_data
        def gds_format_base64(self, input_data, input_name=''):
            return base64.b64encode(input_data)
        def gds_validate_base64(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer(self, input_data, input_name=''):
            return '%d' % input_data
        def gds_validate_integer(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_integer_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_integer_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    int(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of integers')
            return values
        def gds_format_float(self, input_data, input_name=''):
            return ('%.15f' % input_data).rstrip('0')
        def gds_validate_float(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_float_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_float_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of floats')
            return values
        def gds_format_double(self, input_data, input_name=''):
            return '%e' % input_data
        def gds_validate_double(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_double_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_double_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                try:
                    float(value)
                except (TypeError, ValueError):
                    raise_parse_error(node, 'Requires sequence of doubles')
            return values
        def gds_format_boolean(self, input_data, input_name=''):
            return ('%s' % input_data).lower()
        def gds_validate_boolean(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_boolean_list(self, input_data, input_name=''):
            return '%s' % ' '.join(input_data)
        def gds_validate_boolean_list(
                self, input_data, node=None, input_name=''):
            values = input_data.split()
            for value in values:
                if value not in ('true', '1', 'false', '0', ):
                    raise_parse_error(
                        node,
                        'Requires sequence of booleans '
                        '("true", "1", "false", "0")')
            return values
        def gds_validate_datetime(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_datetime(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%04d-%02d-%02dT%02d:%02d:%02d.%s' % (
                    input_data.year,
                    input_data.month,
                    input_data.day,
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        @classmethod
        def gds_parse_datetime(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            time_parts = input_data.split('.')
            if len(time_parts) > 1:
                micro_seconds = int(float('0.' + time_parts[1]) * 1000000)
                input_data = '%s.%s' % (time_parts[0], micro_seconds, )
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(
                    input_data, '%Y-%m-%dT%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt
        def gds_validate_date(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_date(self, input_data, input_name=''):
            _svalue = '%04d-%02d-%02d' % (
                input_data.year,
                input_data.month,
                input_data.day,
            )
            try:
                if input_data.tzinfo is not None:
                    tzoff = input_data.tzinfo.utcoffset(input_data)
                    if tzoff is not None:
                        total_seconds = tzoff.seconds + (86400 * tzoff.days)
                        if total_seconds == 0:
                            _svalue += 'Z'
                        else:
                            if total_seconds < 0:
                                _svalue += '-'
                                total_seconds *= -1
                            else:
                                _svalue += '+'
                            hours = total_seconds // 3600
                            minutes = (total_seconds - (hours * 3600)) // 60
                            _svalue += '{0:02d}:{1:02d}'.format(
                                hours, minutes)
            except AttributeError:
                pass
            return _svalue
        @classmethod
        def gds_parse_date(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            dt = datetime_.datetime.strptime(input_data, '%Y-%m-%d')
            dt = dt.replace(tzinfo=tz)
            return dt.date()
        def gds_validate_time(self, input_data, node=None, input_name=''):
            return input_data
        def gds_format_time(self, input_data, input_name=''):
            if input_data.microsecond == 0:
                _svalue = '%02d:%02d:%02d' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                )
            else:
                _svalue = '%02d:%02d:%02d.%s' % (
                    input_data.hour,
                    input_data.minute,
                    input_data.second,
                    ('%f' % (float(input_data.microsecond) / 1000000))[2:],
                )
            if input_data.tzinfo is not None:
                tzoff = input_data.tzinfo.utcoffset(input_data)
                if tzoff is not None:
                    total_seconds = tzoff.seconds + (86400 * tzoff.days)
                    if total_seconds == 0:
                        _svalue += 'Z'
                    else:
                        if total_seconds < 0:
                            _svalue += '-'
                            total_seconds *= -1
                        else:
                            _svalue += '+'
                        hours = total_seconds // 3600
                        minutes = (total_seconds - (hours * 3600)) // 60
                        _svalue += '{0:02d}:{1:02d}'.format(hours, minutes)
            return _svalue
        def gds_validate_simple_patterns(self, patterns, target):
            # pat is a list of lists of strings/patterns.  We should:
            # - AND the outer elements
            # - OR the inner elements
            found1 = True
            for patterns1 in patterns:
                found2 = False
                for patterns2 in patterns1:
                    if re_.search(patterns2, target) is not None:
                        found2 = True
                        break
                if not found2:
                    found1 = False
                    break
            return found1
        @classmethod
        def gds_parse_time(cls, input_data):
            tz = None
            if input_data[-1] == 'Z':
                tz = GeneratedsSuper._FixedOffsetTZ(0, 'UTC')
                input_data = input_data[:-1]
            else:
                results = GeneratedsSuper.tzoff_pattern.search(input_data)
                if results is not None:
                    tzoff_parts = results.group(2).split(':')
                    tzoff = int(tzoff_parts[0]) * 60 + int(tzoff_parts[1])
                    if results.group(1) == '-':
                        tzoff *= -1
                    tz = GeneratedsSuper._FixedOffsetTZ(
                        tzoff, results.group(0))
                    input_data = input_data[:-6]
            if len(input_data.split('.')) > 1:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S.%f')
            else:
                dt = datetime_.datetime.strptime(input_data, '%H:%M:%S')
            dt = dt.replace(tzinfo=tz)
            return dt.time()
        def gds_str_lower(self, instring):
            return instring.lower()
        def get_path_(self, node):
            path_list = []
            self.get_path_list_(node, path_list)
            path_list.reverse()
            path = '/'.join(path_list)
            return path
        Tag_strip_pattern_ = re_.compile(r'\{.*\}')
        def get_path_list_(self, node, path_list):
            if node is None:
                return
            tag = GeneratedsSuper.Tag_strip_pattern_.sub('', node.tag)
            if tag:
                path_list.append(tag)
            self.get_path_list_(node.getparent(), path_list)
        def get_class_obj_(self, node, default_class=None):
            class_obj1 = default_class
            if 'xsi' in node.nsmap:
                classname = node.get('{%s}type' % node.nsmap['xsi'])
                if classname is not None:
                    names = classname.split(':')
                    if len(names) == 2:
                        classname = names[1]
                    class_obj2 = globals().get(classname)
                    if class_obj2 is not None:
                        class_obj1 = class_obj2
            return class_obj1
        def gds_build_any(self, node, type_name=None):
            return None
        @classmethod
        def gds_reverse_node_mapping(cls, mapping):
            return dict(((v, k) for k, v in mapping.iteritems()))
        @staticmethod
        def gds_encode(instring):
            if sys.version_info.major == 2:
                return instring.encode(ExternalEncoding)
            else:
                return instring
        @staticmethod
        def convert_unicode(instring):
            if isinstance(instring, str):
                result = quote_xml(instring)
            elif sys.version_info.major == 2 and isinstance(instring, unicode):
                result = quote_xml(instring).encode('utf8')
            else:
                result = GeneratedsSuper.gds_encode(str(instring))
            return result
        def __eq__(self, other):
            if type(self) != type(other):
                return False
            return self.__dict__ == other.__dict__
        def __ne__(self, other):
            return not self.__eq__(other)
    
    def getSubclassFromModule_(module, class_):
        '''Get the subclass of a class from a specific module.'''
        name = class_.__name__ + 'Sub'
        if hasattr(module, name):
            return getattr(module, name)
        else:
            return None


#
# If you have installed IPython you can uncomment and use the following.
# IPython is available from http://ipython.scipy.org/.
#

## from IPython.Shell import IPShellEmbed
## args = ''
## ipshell = IPShellEmbed(args,
##     banner = 'Dropping into IPython',
##     exit_msg = 'Leaving Interpreter, back to program.')

# Then use the following line where and when you want to drop into the
# IPython shell:
#    ipshell('<some message> -- Entering ipshell.\nHit Ctrl-D to exit')

#
# Globals
#

ExternalEncoding = 'iso8859-15'
Tag_pattern_ = re_.compile(r'({.*})?(.*)')
String_cleanup_pat_ = re_.compile(r"[\n\r\s]+")
Namespace_extract_pat_ = re_.compile(r'{(.*)}(.*)')
CDATA_pattern_ = re_.compile(r"<!\[CDATA\[.*?\]\]>", re_.DOTALL)

# Change this to redirect the generated superclass module to use a
# specific subclass module.
CurrentSubclassModule_ = None

#
# Support/utility functions.
#


def showIndent(outfile, level, pretty_print=True):
    if pretty_print:
        for idx in range(level):
            outfile.write('    ')


def quote_xml(inStr):
    "Escape markup chars, but do not modify CDATA sections."
    if not inStr:
        return ''
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s2 = ''
    pos = 0
    matchobjects = CDATA_pattern_.finditer(s1)
    for mo in matchobjects:
        s3 = s1[pos:mo.start()]
        s2 += quote_xml_aux(s3)
        s2 += s1[mo.start():mo.end()]
        pos = mo.end()
    s3 = s1[pos:]
    s2 += quote_xml_aux(s3)
    return s2


def quote_xml_aux(inStr):
    s1 = inStr.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    return s1


def quote_attrib(inStr):
    s1 = (isinstance(inStr, BaseStrType_) and inStr or '%s' % inStr)
    s1 = s1.replace('&', '&amp;')
    s1 = s1.replace('<', '&lt;')
    s1 = s1.replace('>', '&gt;')
    if '"' in s1:
        if "'" in s1:
            s1 = '"%s"' % s1.replace('"', "&quot;")
        else:
            s1 = "'%s'" % s1
    else:
        s1 = '"%s"' % s1
    return s1


def quote_python(inStr):
    s1 = inStr
    if s1.find("'") == -1:
        if s1.find('\n') == -1:
            return "'%s'" % s1
        else:
            return "'''%s'''" % s1
    else:
        if s1.find('"') != -1:
            s1 = s1.replace('"', '\\"')
        if s1.find('\n') == -1:
            return '"%s"' % s1
        else:
            return '"""%s"""' % s1


def get_all_text_(node):
    if node.text is not None:
        text = node.text
    else:
        text = ''
    for child in node:
        if child.tail is not None:
            text += child.tail
    return text


def find_attr_value_(attr_name, node):
    attrs = node.attrib
    attr_parts = attr_name.split(':')
    value = None
    if len(attr_parts) == 1:
        value = attrs.get(attr_name)
    elif len(attr_parts) == 2:
        prefix, name = attr_parts
        namespace = node.nsmap.get(prefix)
        if namespace is not None:
            value = attrs.get('{%s}%s' % (namespace, name, ))
    return value


class GDSParseError(Exception):
    pass


def raise_parse_error(node, msg):
    msg = '%s (element %s/line %d)' % (msg, node.tag, node.sourceline, )
    raise GDSParseError(msg)


class MixedContainer:
    # Constants for category:
    CategoryNone = 0
    CategoryText = 1
    CategorySimple = 2
    CategoryComplex = 3
    # Constants for content_type:
    TypeNone = 0
    TypeText = 1
    TypeString = 2
    TypeInteger = 3
    TypeFloat = 4
    TypeDecimal = 5
    TypeDouble = 6
    TypeBoolean = 7
    TypeBase64 = 8
    def __init__(self, category, content_type, name, value):
        self.category = category
        self.content_type = content_type
        self.name = name
        self.value = value
    def getCategory(self):
        return self.category
    def getContenttype(self, content_type):
        return self.content_type
    def getValue(self):
        return self.value
    def getName(self):
        return self.name
    def export(self, outfile, level, name, namespace,
               pretty_print=True):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                outfile.write(self.value)
        elif self.category == MixedContainer.CategorySimple:
            self.exportSimple(outfile, level, name)
        else:    # category == MixedContainer.CategoryComplex
            self.value.export(
                outfile, level, namespace, name,
                pretty_print=pretty_print)
    def exportSimple(self, outfile, level, name):
        if self.content_type == MixedContainer.TypeString:
            outfile.write('<%s>%s</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeInteger or \
                self.content_type == MixedContainer.TypeBoolean:
            outfile.write('<%s>%d</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeFloat or \
                self.content_type == MixedContainer.TypeDecimal:
            outfile.write('<%s>%f</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeDouble:
            outfile.write('<%s>%g</%s>' % (
                self.name, self.value, self.name))
        elif self.content_type == MixedContainer.TypeBase64:
            outfile.write('<%s>%s</%s>' % (
                self.name,
                base64.b64encode(self.value),
                self.name))
    def to_etree(self, element):
        if self.category == MixedContainer.CategoryText:
            # Prevent exporting empty content as empty lines.
            if self.value.strip():
                if len(element) > 0:
                    if element[-1].tail is None:
                        element[-1].tail = self.value
                    else:
                        element[-1].tail += self.value
                else:
                    if element.text is None:
                        element.text = self.value
                    else:
                        element.text += self.value
        elif self.category == MixedContainer.CategorySimple:
            subelement = etree_.SubElement(
                element, '%s' % self.name)
            subelement.text = self.to_etree_simple()
        else:    # category == MixedContainer.CategoryComplex
            self.value.to_etree(element)
    def to_etree_simple(self):
        if self.content_type == MixedContainer.TypeString:
            text = self.value
        elif (self.content_type == MixedContainer.TypeInteger or
                self.content_type == MixedContainer.TypeBoolean):
            text = '%d' % self.value
        elif (self.content_type == MixedContainer.TypeFloat or
                self.content_type == MixedContainer.TypeDecimal):
            text = '%f' % self.value
        elif self.content_type == MixedContainer.TypeDouble:
            text = '%g' % self.value
        elif self.content_type == MixedContainer.TypeBase64:
            text = '%s' % base64.b64encode(self.value)
        return text
    def exportLiteral(self, outfile, level, name):
        if self.category == MixedContainer.CategoryText:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        elif self.category == MixedContainer.CategorySimple:
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s", "%s"),\n' % (
                    self.category, self.content_type,
                    self.name, self.value))
        else:    # category == MixedContainer.CategoryComplex
            showIndent(outfile, level)
            outfile.write(
                'model_.MixedContainer(%d, %d, "%s",\n' % (
                    self.category, self.content_type, self.name,))
            self.value.exportLiteral(outfile, level + 1)
            showIndent(outfile, level)
            outfile.write(')\n')


class MemberSpec_(object):
    def __init__(self, name='', data_type='', container=0,
            optional=0, child_attrs=None, choice=None):
        self.name = name
        self.data_type = data_type
        self.container = container
        self.child_attrs = child_attrs
        self.choice = choice
        self.optional = optional
    def set_name(self, name): self.name = name
    def get_name(self): return self.name
    def set_data_type(self, data_type): self.data_type = data_type
    def get_data_type_chain(self): return self.data_type
    def get_data_type(self):
        if isinstance(self.data_type, list):
            if len(self.data_type) > 0:
                return self.data_type[-1]
            else:
                return 'xs:string'
        else:
            return self.data_type
    def set_container(self, container): self.container = container
    def get_container(self): return self.container
    def set_child_attrs(self, child_attrs): self.child_attrs = child_attrs
    def get_child_attrs(self): return self.child_attrs
    def set_choice(self, choice): self.choice = choice
    def get_choice(self): return self.choice
    def set_optional(self, optional): self.optional = optional
    def get_optional(self): return self.optional


def _cast(typ, value):
    if typ is None or value is None:
        return value
    return typ(value)

#
# Data representation classes.
#


class FinvoiceSenderInfo(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('Version', 'xs:NMTOKEN', 0, 0, {'use': 'required'}),
        MemberSpec_('MessageDetails', 'MessageDetailsType', 0, 0, {'name': 'MessageDetails', 'type': 'MessageDetailsType'}, None),
        MemberSpec_('SellerPartyDetails', 'SellerPartyDetailsType', 0, 0, {'name': 'SellerPartyDetails', 'type': 'SellerPartyDetailsType'}, None),
        MemberSpec_('SellerOrganisationUnitNumber', ['genericStringType5_35', 'xs:string'], 0, 1, {'name': 'SellerOrganisationUnitNumber', 'minOccurs': '0', 'type': 'xs:string'}, None),
        MemberSpec_('InvoiceSenderInformationDetails', 'InvoiceSenderInformationDetailsType', 0, 0, {'name': 'InvoiceSenderInformationDetails', 'type': 'InvoiceSenderInformationDetailsType'}, None),
        MemberSpec_('SellerAccountDetails', 'SellerAccountDetailsType', 1, 0, {'name': 'SellerAccountDetails', 'maxOccurs': 'unbounded', 'type': 'SellerAccountDetailsType'}, None),
        MemberSpec_('SellerInvoiceDetails', 'SellerInvoiceDetailsType', 0, 0, {'name': 'SellerInvoiceDetails', 'type': 'SellerInvoiceDetailsType'}, None),
        MemberSpec_('ProposedDueDateAccepted', ['YesNoType', 'xs:NMTOKEN'], 0, 1, {'name': 'ProposedDueDateAccepted', 'minOccurs': '0', 'type': 'xs:NMTOKEN'}, None),
        MemberSpec_('ProposedInvoicePeriodAccepted', ['YesNoType', 'xs:NMTOKEN'], 0, 1, {'name': 'ProposedInvoicePeriodAccepted', 'minOccurs': '0', 'type': 'xs:NMTOKEN'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, Version=None, MessageDetails=None, SellerPartyDetails=None, SellerOrganisationUnitNumber=None, InvoiceSenderInformationDetails=None, SellerAccountDetails=None, SellerInvoiceDetails=None, ProposedDueDateAccepted=None, ProposedInvoicePeriodAccepted=None):
        self.original_tagname_ = None
        self.Version = _cast(None, Version)
        self.MessageDetails = MessageDetails
        self.SellerPartyDetails = SellerPartyDetails
        self.SellerOrganisationUnitNumber = SellerOrganisationUnitNumber
        self.validate_genericStringType5_35(self.SellerOrganisationUnitNumber)
        self.InvoiceSenderInformationDetails = InvoiceSenderInformationDetails
        if SellerAccountDetails is None:
            self.SellerAccountDetails = []
        else:
            self.SellerAccountDetails = SellerAccountDetails
        self.SellerInvoiceDetails = SellerInvoiceDetails
        self.ProposedDueDateAccepted = ProposedDueDateAccepted
        self.validate_YesNoType(self.ProposedDueDateAccepted)
        self.ProposedInvoicePeriodAccepted = ProposedInvoicePeriodAccepted
        self.validate_YesNoType(self.ProposedInvoicePeriodAccepted)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, FinvoiceSenderInfo)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if FinvoiceSenderInfo.subclass:
            return FinvoiceSenderInfo.subclass(*args_, **kwargs_)
        else:
            return FinvoiceSenderInfo(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MessageDetails(self): return self.MessageDetails
    def set_MessageDetails(self, MessageDetails): self.MessageDetails = MessageDetails
    def get_SellerPartyDetails(self): return self.SellerPartyDetails
    def set_SellerPartyDetails(self, SellerPartyDetails): self.SellerPartyDetails = SellerPartyDetails
    def get_SellerOrganisationUnitNumber(self): return self.SellerOrganisationUnitNumber
    def set_SellerOrganisationUnitNumber(self, SellerOrganisationUnitNumber): self.SellerOrganisationUnitNumber = SellerOrganisationUnitNumber
    def get_InvoiceSenderInformationDetails(self): return self.InvoiceSenderInformationDetails
    def set_InvoiceSenderInformationDetails(self, InvoiceSenderInformationDetails): self.InvoiceSenderInformationDetails = InvoiceSenderInformationDetails
    def get_SellerAccountDetails(self): return self.SellerAccountDetails
    def set_SellerAccountDetails(self, SellerAccountDetails): self.SellerAccountDetails = SellerAccountDetails
    def add_SellerAccountDetails(self, value): self.SellerAccountDetails.append(value)
    def insert_SellerAccountDetails_at(self, index, value): self.SellerAccountDetails.insert(index, value)
    def replace_SellerAccountDetails_at(self, index, value): self.SellerAccountDetails[index] = value
    def get_SellerInvoiceDetails(self): return self.SellerInvoiceDetails
    def set_SellerInvoiceDetails(self, SellerInvoiceDetails): self.SellerInvoiceDetails = SellerInvoiceDetails
    def get_ProposedDueDateAccepted(self): return self.ProposedDueDateAccepted
    def set_ProposedDueDateAccepted(self, ProposedDueDateAccepted): self.ProposedDueDateAccepted = ProposedDueDateAccepted
    def get_ProposedInvoicePeriodAccepted(self): return self.ProposedInvoicePeriodAccepted
    def set_ProposedInvoicePeriodAccepted(self, ProposedInvoicePeriodAccepted): self.ProposedInvoicePeriodAccepted = ProposedInvoicePeriodAccepted
    def get_Version(self): return self.Version
    def set_Version(self, Version): self.Version = Version
    def validate_genericStringType5_35(self, value):
        # Validate type genericStringType5_35, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType5_35' % {"value" : value.encode("utf-8")} )
            if len(value) < 5:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType5_35' % {"value" : value.encode("utf-8")} )
    def validate_YesNoType(self, value):
        # Validate type YesNoType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['YES', 'NO']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on YesNoType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MessageDetails is not None or
            self.SellerPartyDetails is not None or
            self.SellerOrganisationUnitNumber is not None or
            self.InvoiceSenderInformationDetails is not None or
            self.SellerAccountDetails or
            self.SellerInvoiceDetails is not None or
            self.ProposedDueDateAccepted is not None or
            self.ProposedInvoicePeriodAccepted is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='FinvoiceSenderInfo', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('FinvoiceSenderInfo')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='FinvoiceSenderInfo')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='FinvoiceSenderInfo', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='FinvoiceSenderInfo'):
        if self.Version is not None and 'Version' not in already_processed:
            already_processed.add('Version')
            outfile.write(' Version=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Version), input_name='Version')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='FinvoiceSenderInfo', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MessageDetails is not None:
            self.MessageDetails.export(outfile, level, namespace_, name_='MessageDetails', pretty_print=pretty_print)
        if self.SellerPartyDetails is not None:
            self.SellerPartyDetails.export(outfile, level, namespace_, name_='SellerPartyDetails', pretty_print=pretty_print)
        if self.SellerOrganisationUnitNumber is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerOrganisationUnitNumber>%s</%sSellerOrganisationUnitNumber>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellerOrganisationUnitNumber), input_name='SellerOrganisationUnitNumber')), namespace_, eol_))
        if self.InvoiceSenderInformationDetails is not None:
            self.InvoiceSenderInformationDetails.export(outfile, level, namespace_, name_='InvoiceSenderInformationDetails', pretty_print=pretty_print)
        for SellerAccountDetails_ in self.SellerAccountDetails:
            SellerAccountDetails_.export(outfile, level, namespace_, name_='SellerAccountDetails', pretty_print=pretty_print)
        if self.SellerInvoiceDetails is not None:
            self.SellerInvoiceDetails.export(outfile, level, namespace_, name_='SellerInvoiceDetails', pretty_print=pretty_print)
        if self.ProposedDueDateAccepted is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProposedDueDateAccepted>%s</%sProposedDueDateAccepted>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProposedDueDateAccepted), input_name='ProposedDueDateAccepted')), namespace_, eol_))
        if self.ProposedInvoicePeriodAccepted is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sProposedInvoicePeriodAccepted>%s</%sProposedInvoicePeriodAccepted>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.ProposedInvoicePeriodAccepted), input_name='ProposedInvoicePeriodAccepted')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Version', node)
        if value is not None and 'Version' not in already_processed:
            already_processed.add('Version')
            self.Version = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MessageDetails':
            obj_ = MessageDetailsType.factory()
            obj_.build(child_)
            self.MessageDetails = obj_
            obj_.original_tagname_ = 'MessageDetails'
        elif nodeName_ == 'SellerPartyDetails':
            obj_ = SellerPartyDetailsType.factory()
            obj_.build(child_)
            self.SellerPartyDetails = obj_
            obj_.original_tagname_ = 'SellerPartyDetails'
        elif nodeName_ == 'SellerOrganisationUnitNumber':
            SellerOrganisationUnitNumber_ = child_.text
            SellerOrganisationUnitNumber_ = self.gds_validate_string(SellerOrganisationUnitNumber_, node, 'SellerOrganisationUnitNumber')
            self.SellerOrganisationUnitNumber = SellerOrganisationUnitNumber_
            # validate type genericStringType5_35
            self.validate_genericStringType5_35(self.SellerOrganisationUnitNumber)
        elif nodeName_ == 'InvoiceSenderInformationDetails':
            obj_ = InvoiceSenderInformationDetailsType.factory()
            obj_.build(child_)
            self.InvoiceSenderInformationDetails = obj_
            obj_.original_tagname_ = 'InvoiceSenderInformationDetails'
        elif nodeName_ == 'SellerAccountDetails':
            obj_ = SellerAccountDetailsType.factory()
            obj_.build(child_)
            self.SellerAccountDetails.append(obj_)
            obj_.original_tagname_ = 'SellerAccountDetails'
        elif nodeName_ == 'SellerInvoiceDetails':
            obj_ = SellerInvoiceDetailsType.factory()
            obj_.build(child_)
            self.SellerInvoiceDetails = obj_
            obj_.original_tagname_ = 'SellerInvoiceDetails'
        elif nodeName_ == 'ProposedDueDateAccepted':
            ProposedDueDateAccepted_ = child_.text
            ProposedDueDateAccepted_ = self.gds_validate_string(ProposedDueDateAccepted_, node, 'ProposedDueDateAccepted')
            self.ProposedDueDateAccepted = ProposedDueDateAccepted_
            # validate type YesNoType
            self.validate_YesNoType(self.ProposedDueDateAccepted)
        elif nodeName_ == 'ProposedInvoicePeriodAccepted':
            ProposedInvoicePeriodAccepted_ = child_.text
            ProposedInvoicePeriodAccepted_ = self.gds_validate_string(ProposedInvoicePeriodAccepted_, node, 'ProposedInvoicePeriodAccepted')
            self.ProposedInvoicePeriodAccepted = ProposedInvoicePeriodAccepted_
            # validate type YesNoType
            self.validate_YesNoType(self.ProposedInvoicePeriodAccepted)
# end class FinvoiceSenderInfo


class InvoiceSenderInformationDetailsType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('SellerWebaddressNameText', ['genericStringType0_70', 'xs:string'], 0, 1, {'name': 'SellerWebaddressNameText', 'minOccurs': '0', 'type': 'xs:string'}, None),
        MemberSpec_('SellerWebaddressText', ['genericStringType0_512', 'xs:string'], 0, 1, {'name': 'SellerWebaddressText', 'minOccurs': '0', 'type': 'xs:string'}, None),
        MemberSpec_('InvoiceSenderAddress', ['genericStringType0_35', 'xs:string'], 0, 0, {'name': 'InvoiceSenderAddress', 'type': 'xs:string'}, None),
        MemberSpec_('InvoiceSenderIntermediatorAddress', ['genericNMtokenType8_11', 'genericNMtokenType', 'xs:token'], 0, 0, {'name': 'InvoiceSenderIntermediatorAddress', 'type': 'xs:token'}, None),
        MemberSpec_('NewInvoiceSenderAddress', ['genericStringType0_35', 'xs:string'], 0, 1, {'name': 'NewInvoiceSenderAddress', 'minOccurs': '0', 'type': 'xs:string'}, None),
        MemberSpec_('NewInvoiceSenderIntermediatorAddress', ['genericNMtokenType8_11', 'genericNMtokenType', 'xs:token'], 0, 1, {'name': 'NewInvoiceSenderIntermediatorAddress', 'minOccurs': '0', 'type': 'xs:token'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, SellerWebaddressNameText=None, SellerWebaddressText=None, InvoiceSenderAddress=None, InvoiceSenderIntermediatorAddress=None, NewInvoiceSenderAddress=None, NewInvoiceSenderIntermediatorAddress=None):
        self.original_tagname_ = None
        self.SellerWebaddressNameText = SellerWebaddressNameText
        self.validate_genericStringType0_70(self.SellerWebaddressNameText)
        self.SellerWebaddressText = SellerWebaddressText
        self.validate_genericStringType0_512(self.SellerWebaddressText)
        self.InvoiceSenderAddress = InvoiceSenderAddress
        self.validate_genericStringType0_35(self.InvoiceSenderAddress)
        self.InvoiceSenderIntermediatorAddress = InvoiceSenderIntermediatorAddress
        self.validate_genericNMtokenType8_11(self.InvoiceSenderIntermediatorAddress)
        self.NewInvoiceSenderAddress = NewInvoiceSenderAddress
        self.validate_genericStringType0_35(self.NewInvoiceSenderAddress)
        self.NewInvoiceSenderIntermediatorAddress = NewInvoiceSenderIntermediatorAddress
        self.validate_genericNMtokenType8_11(self.NewInvoiceSenderIntermediatorAddress)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, InvoiceSenderInformationDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if InvoiceSenderInformationDetailsType.subclass:
            return InvoiceSenderInformationDetailsType.subclass(*args_, **kwargs_)
        else:
            return InvoiceSenderInformationDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SellerWebaddressNameText(self): return self.SellerWebaddressNameText
    def set_SellerWebaddressNameText(self, SellerWebaddressNameText): self.SellerWebaddressNameText = SellerWebaddressNameText
    def get_SellerWebaddressText(self): return self.SellerWebaddressText
    def set_SellerWebaddressText(self, SellerWebaddressText): self.SellerWebaddressText = SellerWebaddressText
    def get_InvoiceSenderAddress(self): return self.InvoiceSenderAddress
    def set_InvoiceSenderAddress(self, InvoiceSenderAddress): self.InvoiceSenderAddress = InvoiceSenderAddress
    def get_InvoiceSenderIntermediatorAddress(self): return self.InvoiceSenderIntermediatorAddress
    def set_InvoiceSenderIntermediatorAddress(self, InvoiceSenderIntermediatorAddress): self.InvoiceSenderIntermediatorAddress = InvoiceSenderIntermediatorAddress
    def get_NewInvoiceSenderAddress(self): return self.NewInvoiceSenderAddress
    def set_NewInvoiceSenderAddress(self, NewInvoiceSenderAddress): self.NewInvoiceSenderAddress = NewInvoiceSenderAddress
    def get_NewInvoiceSenderIntermediatorAddress(self): return self.NewInvoiceSenderIntermediatorAddress
    def set_NewInvoiceSenderIntermediatorAddress(self, NewInvoiceSenderIntermediatorAddress): self.NewInvoiceSenderIntermediatorAddress = NewInvoiceSenderIntermediatorAddress
    def validate_genericStringType0_70(self, value):
        # Validate type genericStringType0_70, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType0_70' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType0_70' % {"value" : value.encode("utf-8")} )
    def validate_genericStringType0_512(self, value):
        # Validate type genericStringType0_512, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 512:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType0_512' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType0_512' % {"value" : value.encode("utf-8")} )
    def validate_genericStringType0_35(self, value):
        # Validate type genericStringType0_35, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType0_35' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType0_35' % {"value" : value.encode("utf-8")} )
    def validate_genericNMtokenType8_11(self, value):
        # Validate type genericNMtokenType8_11, a restriction on genericNMtokenType.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) > 11:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericNMtokenType8_11' % {"value" : value} )
            if len(str(value)) < 8:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericNMtokenType8_11' % {"value" : value} )
            if not self.gds_validate_simple_patterns(
                    self.validate_genericNMtokenType8_11_patterns_, value):
                warnings_.warn('Value "%s" does not match xsd pattern restrictions: %s' % (value.encode('utf-8'), self.validate_genericNMtokenType8_11_patterns_, ))
    validate_genericNMtokenType8_11_patterns_ = [['^\\c*$']]
    def hasContent_(self):
        if (
            self.SellerWebaddressNameText is not None or
            self.SellerWebaddressText is not None or
            self.InvoiceSenderAddress is not None or
            self.InvoiceSenderIntermediatorAddress is not None or
            self.NewInvoiceSenderAddress is not None or
            self.NewInvoiceSenderIntermediatorAddress is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='InvoiceSenderInformationDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('InvoiceSenderInformationDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='InvoiceSenderInformationDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='InvoiceSenderInformationDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='InvoiceSenderInformationDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='InvoiceSenderInformationDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SellerWebaddressNameText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerWebaddressNameText>%s</%sSellerWebaddressNameText>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellerWebaddressNameText), input_name='SellerWebaddressNameText')), namespace_, eol_))
        if self.SellerWebaddressText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerWebaddressText>%s</%sSellerWebaddressText>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellerWebaddressText), input_name='SellerWebaddressText')), namespace_, eol_))
        if self.InvoiceSenderAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoiceSenderAddress>%s</%sInvoiceSenderAddress>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.InvoiceSenderAddress), input_name='InvoiceSenderAddress')), namespace_, eol_))
        if self.InvoiceSenderIntermediatorAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sInvoiceSenderIntermediatorAddress>%s</%sInvoiceSenderIntermediatorAddress>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.InvoiceSenderIntermediatorAddress), input_name='InvoiceSenderIntermediatorAddress')), namespace_, eol_))
        if self.NewInvoiceSenderAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewInvoiceSenderAddress>%s</%sNewInvoiceSenderAddress>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NewInvoiceSenderAddress), input_name='NewInvoiceSenderAddress')), namespace_, eol_))
        if self.NewInvoiceSenderIntermediatorAddress is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sNewInvoiceSenderIntermediatorAddress>%s</%sNewInvoiceSenderIntermediatorAddress>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.NewInvoiceSenderIntermediatorAddress), input_name='NewInvoiceSenderIntermediatorAddress')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SellerWebaddressNameText':
            SellerWebaddressNameText_ = child_.text
            SellerWebaddressNameText_ = self.gds_validate_string(SellerWebaddressNameText_, node, 'SellerWebaddressNameText')
            self.SellerWebaddressNameText = SellerWebaddressNameText_
            # validate type genericStringType0_70
            self.validate_genericStringType0_70(self.SellerWebaddressNameText)
        elif nodeName_ == 'SellerWebaddressText':
            SellerWebaddressText_ = child_.text
            SellerWebaddressText_ = self.gds_validate_string(SellerWebaddressText_, node, 'SellerWebaddressText')
            self.SellerWebaddressText = SellerWebaddressText_
            # validate type genericStringType0_512
            self.validate_genericStringType0_512(self.SellerWebaddressText)
        elif nodeName_ == 'InvoiceSenderAddress':
            InvoiceSenderAddress_ = child_.text
            InvoiceSenderAddress_ = self.gds_validate_string(InvoiceSenderAddress_, node, 'InvoiceSenderAddress')
            self.InvoiceSenderAddress = InvoiceSenderAddress_
            # validate type genericStringType0_35
            self.validate_genericStringType0_35(self.InvoiceSenderAddress)
        elif nodeName_ == 'InvoiceSenderIntermediatorAddress':
            InvoiceSenderIntermediatorAddress_ = child_.text
            if InvoiceSenderIntermediatorAddress_:
                InvoiceSenderIntermediatorAddress_ = re_.sub(String_cleanup_pat_, " ", InvoiceSenderIntermediatorAddress_).strip()
            else:
                InvoiceSenderIntermediatorAddress_ = ""
            InvoiceSenderIntermediatorAddress_ = self.gds_validate_string(InvoiceSenderIntermediatorAddress_, node, 'InvoiceSenderIntermediatorAddress')
            self.InvoiceSenderIntermediatorAddress = InvoiceSenderIntermediatorAddress_
            # validate type genericNMtokenType8_11
            self.validate_genericNMtokenType8_11(self.InvoiceSenderIntermediatorAddress)
        elif nodeName_ == 'NewInvoiceSenderAddress':
            NewInvoiceSenderAddress_ = child_.text
            NewInvoiceSenderAddress_ = self.gds_validate_string(NewInvoiceSenderAddress_, node, 'NewInvoiceSenderAddress')
            self.NewInvoiceSenderAddress = NewInvoiceSenderAddress_
            # validate type genericStringType0_35
            self.validate_genericStringType0_35(self.NewInvoiceSenderAddress)
        elif nodeName_ == 'NewInvoiceSenderIntermediatorAddress':
            NewInvoiceSenderIntermediatorAddress_ = child_.text
            if NewInvoiceSenderIntermediatorAddress_:
                NewInvoiceSenderIntermediatorAddress_ = re_.sub(String_cleanup_pat_, " ", NewInvoiceSenderIntermediatorAddress_).strip()
            else:
                NewInvoiceSenderIntermediatorAddress_ = ""
            NewInvoiceSenderIntermediatorAddress_ = self.gds_validate_string(NewInvoiceSenderIntermediatorAddress_, node, 'NewInvoiceSenderIntermediatorAddress')
            self.NewInvoiceSenderIntermediatorAddress = NewInvoiceSenderIntermediatorAddress_
            # validate type genericNMtokenType8_11
            self.validate_genericNMtokenType8_11(self.NewInvoiceSenderIntermediatorAddress)
# end class InvoiceSenderInformationDetailsType


class MessageDetailsType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('MessageTypeCode', 'xs:string', 0, 0, {'type': 'xs:string', 'name': 'MessageTypeCode', 'fixed': 'SENDERINFO'}, None),
        MemberSpec_('MessageTypeText', ['genericStringType0_35', 'xs:string'], 0, 0, {'name': 'MessageTypeText', 'type': 'xs:string'}, None),
        MemberSpec_('MessageActionCode', ['MessageActionCodeType', 'xs:string'], 0, 0, {'name': 'MessageActionCode', 'type': 'xs:string'}, None),
        MemberSpec_('MessageActionCodeIdentifier', ['MessageActionCodeIdentifierType', 'xs:NMTOKEN'], 0, 1, {'name': 'MessageActionCodeIdentifier', 'minOccurs': '0', 'type': 'xs:NMTOKEN'}, None),
        MemberSpec_('MessageDate', 'date', 0, 0, {'name': 'MessageDate', 'type': 'date'}, None),
        MemberSpec_('SenderInfoIdentifier', ['genericStringType1_48', 'xs:string'], 0, 0, {'name': 'SenderInfoIdentifier', 'type': 'xs:string'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, MessageTypeCode=None, MessageTypeText=None, MessageActionCode=None, MessageActionCodeIdentifier=None, MessageDate=None, SenderInfoIdentifier=None):
        self.original_tagname_ = None
        self.MessageTypeCode = MessageTypeCode
        self.MessageTypeText = MessageTypeText
        self.validate_genericStringType0_35(self.MessageTypeText)
        self.MessageActionCode = MessageActionCode
        self.validate_MessageActionCodeType(self.MessageActionCode)
        self.MessageActionCodeIdentifier = MessageActionCodeIdentifier
        self.validate_MessageActionCodeIdentifierType(self.MessageActionCodeIdentifier)
        self.MessageDate = MessageDate
        self.SenderInfoIdentifier = SenderInfoIdentifier
        self.validate_genericStringType1_48(self.SenderInfoIdentifier)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, MessageDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if MessageDetailsType.subclass:
            return MessageDetailsType.subclass(*args_, **kwargs_)
        else:
            return MessageDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_MessageTypeCode(self): return self.MessageTypeCode
    def set_MessageTypeCode(self, MessageTypeCode): self.MessageTypeCode = MessageTypeCode
    def get_MessageTypeText(self): return self.MessageTypeText
    def set_MessageTypeText(self, MessageTypeText): self.MessageTypeText = MessageTypeText
    def get_MessageActionCode(self): return self.MessageActionCode
    def set_MessageActionCode(self, MessageActionCode): self.MessageActionCode = MessageActionCode
    def get_MessageActionCodeIdentifier(self): return self.MessageActionCodeIdentifier
    def set_MessageActionCodeIdentifier(self, MessageActionCodeIdentifier): self.MessageActionCodeIdentifier = MessageActionCodeIdentifier
    def get_MessageDate(self): return self.MessageDate
    def set_MessageDate(self, MessageDate): self.MessageDate = MessageDate
    def get_SenderInfoIdentifier(self): return self.SenderInfoIdentifier
    def set_SenderInfoIdentifier(self, SenderInfoIdentifier): self.SenderInfoIdentifier = SenderInfoIdentifier
    def validate_genericStringType0_35(self, value):
        # Validate type genericStringType0_35, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType0_35' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType0_35' % {"value" : value.encode("utf-8")} )
    def validate_MessageActionCodeType(self, value):
        # Validate type MessageActionCodeType, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['ADD', 'CHANGE', 'DELETE']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MessageActionCodeType' % {"value" : value.encode("utf-8")} )
    def validate_MessageActionCodeIdentifierType(self, value):
        # Validate type MessageActionCodeIdentifierType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['00', '02']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on MessageActionCodeIdentifierType' % {"value" : value.encode("utf-8")} )
    def validate_genericStringType1_48(self, value):
        # Validate type genericStringType1_48, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 48:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType1_48' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType1_48' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.MessageTypeCode is not None or
            self.MessageTypeText is not None or
            self.MessageActionCode is not None or
            self.MessageActionCodeIdentifier is not None or
            self.MessageDate is not None or
            self.SenderInfoIdentifier is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='MessageDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('MessageDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='MessageDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='MessageDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='MessageDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='MessageDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.MessageTypeCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessageTypeCode>%s</%sMessageTypeCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MessageTypeCode), input_name='MessageTypeCode')), namespace_, eol_))
        if self.MessageTypeText is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessageTypeText>%s</%sMessageTypeText>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MessageTypeText), input_name='MessageTypeText')), namespace_, eol_))
        if self.MessageActionCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessageActionCode>%s</%sMessageActionCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MessageActionCode), input_name='MessageActionCode')), namespace_, eol_))
        if self.MessageActionCodeIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sMessageActionCodeIdentifier>%s</%sMessageActionCodeIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.MessageActionCodeIdentifier), input_name='MessageActionCodeIdentifier')), namespace_, eol_))
        if self.MessageDate is not None:
            self.MessageDate.export(outfile, level, namespace_, name_='MessageDate', pretty_print=pretty_print)
        if self.SenderInfoIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSenderInfoIdentifier>%s</%sSenderInfoIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SenderInfoIdentifier), input_name='SenderInfoIdentifier')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'MessageTypeCode':
            MessageTypeCode_ = child_.text
            MessageTypeCode_ = self.gds_validate_string(MessageTypeCode_, node, 'MessageTypeCode')
            self.MessageTypeCode = MessageTypeCode_
        elif nodeName_ == 'MessageTypeText':
            MessageTypeText_ = child_.text
            MessageTypeText_ = self.gds_validate_string(MessageTypeText_, node, 'MessageTypeText')
            self.MessageTypeText = MessageTypeText_
            # validate type genericStringType0_35
            self.validate_genericStringType0_35(self.MessageTypeText)
        elif nodeName_ == 'MessageActionCode':
            MessageActionCode_ = child_.text
            MessageActionCode_ = self.gds_validate_string(MessageActionCode_, node, 'MessageActionCode')
            self.MessageActionCode = MessageActionCode_
            # validate type MessageActionCodeType
            self.validate_MessageActionCodeType(self.MessageActionCode)
        elif nodeName_ == 'MessageActionCodeIdentifier':
            MessageActionCodeIdentifier_ = child_.text
            MessageActionCodeIdentifier_ = self.gds_validate_string(MessageActionCodeIdentifier_, node, 'MessageActionCodeIdentifier')
            self.MessageActionCodeIdentifier = MessageActionCodeIdentifier_
            # validate type MessageActionCodeIdentifierType
            self.validate_MessageActionCodeIdentifierType(self.MessageActionCodeIdentifier)
        elif nodeName_ == 'MessageDate':
            obj_ = date.factory()
            obj_.build(child_)
            self.MessageDate = obj_
            obj_.original_tagname_ = 'MessageDate'
        elif nodeName_ == 'SenderInfoIdentifier':
            SenderInfoIdentifier_ = child_.text
            SenderInfoIdentifier_ = self.gds_validate_string(SenderInfoIdentifier_, node, 'SenderInfoIdentifier')
            self.SenderInfoIdentifier = SenderInfoIdentifier_
            # validate type genericStringType1_48
            self.validate_genericStringType1_48(self.SenderInfoIdentifier)
# end class MessageDetailsType


class SellerAccountDetailsType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('SellerAccountID', 'SellerAccountIDType1', 0, 0, {'name': 'SellerAccountID', 'type': 'SellerAccountIDType1'}, None),
        MemberSpec_('SellerBic', 'SellerBicType2', 0, 0, {'name': 'SellerBic', 'type': 'SellerBicType2'}, None),
        MemberSpec_('NewSellerAccountID', 'NewSellerAccountIDType', 0, 1, {'name': 'NewSellerAccountID', 'minOccurs': '0', 'type': 'NewSellerAccountIDType'}, None),
        MemberSpec_('NewSellerBic', 'NewSellerBicType', 0, 1, {'name': 'NewSellerBic', 'minOccurs': '0', 'type': 'NewSellerBicType'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, SellerAccountID=None, SellerBic=None, NewSellerAccountID=None, NewSellerBic=None):
        self.original_tagname_ = None
        self.SellerAccountID = SellerAccountID
        self.SellerBic = SellerBic
        self.NewSellerAccountID = NewSellerAccountID
        self.NewSellerBic = NewSellerBic
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerAccountDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerAccountDetailsType.subclass:
            return SellerAccountDetailsType.subclass(*args_, **kwargs_)
        else:
            return SellerAccountDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SellerAccountID(self): return self.SellerAccountID
    def set_SellerAccountID(self, SellerAccountID): self.SellerAccountID = SellerAccountID
    def get_SellerBic(self): return self.SellerBic
    def set_SellerBic(self, SellerBic): self.SellerBic = SellerBic
    def get_NewSellerAccountID(self): return self.NewSellerAccountID
    def set_NewSellerAccountID(self, NewSellerAccountID): self.NewSellerAccountID = NewSellerAccountID
    def get_NewSellerBic(self): return self.NewSellerBic
    def set_NewSellerBic(self, NewSellerBic): self.NewSellerBic = NewSellerBic
    def hasContent_(self):
        if (
            self.SellerAccountID is not None or
            self.SellerBic is not None or
            self.NewSellerAccountID is not None or
            self.NewSellerBic is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerAccountDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerAccountDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerAccountDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerAccountDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerAccountDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SellerAccountDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SellerAccountID is not None:
            self.SellerAccountID.export(outfile, level, namespace_, name_='SellerAccountID', pretty_print=pretty_print)
        if self.SellerBic is not None:
            self.SellerBic.export(outfile, level, namespace_, name_='SellerBic', pretty_print=pretty_print)
        if self.NewSellerAccountID is not None:
            self.NewSellerAccountID.export(outfile, level, namespace_, name_='NewSellerAccountID', pretty_print=pretty_print)
        if self.NewSellerBic is not None:
            self.NewSellerBic.export(outfile, level, namespace_, name_='NewSellerBic', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SellerAccountID':
            obj_ = SellerAccountIDType1.factory()
            obj_.build(child_)
            self.SellerAccountID = obj_
            obj_.original_tagname_ = 'SellerAccountID'
        elif nodeName_ == 'SellerBic':
            obj_ = SellerBicType2.factory()
            obj_.build(child_)
            self.SellerBic = obj_
            obj_.original_tagname_ = 'SellerBic'
        elif nodeName_ == 'NewSellerAccountID':
            obj_ = NewSellerAccountIDType.factory()
            obj_.build(child_)
            self.NewSellerAccountID = obj_
            obj_.original_tagname_ = 'NewSellerAccountID'
        elif nodeName_ == 'NewSellerBic':
            obj_ = NewSellerBicType.factory()
            obj_.build(child_)
            self.NewSellerBic = obj_
            obj_.original_tagname_ = 'NewSellerBic'
# end class SellerAccountDetailsType


class SellerAccountIDType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('IdentificationSchemeName', 'xs:string', 0, 0, {'use': 'required'}),
        MemberSpec_('valueOf_', 'xs:string', 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, IdentificationSchemeName=None, valueOf_=None, extensiontype_=None):
        self.original_tagname_ = None
        self.IdentificationSchemeName = _cast(None, IdentificationSchemeName)
        self.valueOf_ = valueOf_
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerAccountIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerAccountIDType.subclass:
            return SellerAccountIDType.subclass(*args_, **kwargs_)
        else:
            return SellerAccountIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdentificationSchemeName(self): return self.IdentificationSchemeName
    def set_IdentificationSchemeName(self, IdentificationSchemeName): self.IdentificationSchemeName = IdentificationSchemeName
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerAccountIDType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerAccountIDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerAccountIDType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerAccountIDType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerAccountIDType'):
        if self.IdentificationSchemeName is not None and 'IdentificationSchemeName' not in already_processed:
            already_processed.add('IdentificationSchemeName')
            outfile.write(' IdentificationSchemeName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.IdentificationSchemeName), input_name='IdentificationSchemeName')), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='SellerAccountIDType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('IdentificationSchemeName', node)
        if value is not None and 'IdentificationSchemeName' not in already_processed:
            already_processed.add('IdentificationSchemeName')
            self.IdentificationSchemeName = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    def validate_valueOf_(self, value):
        if ( isinstance( value, BaseStrType_ ) and value.__len__() <= 35 ):
            pass
        else:
            raise_value_error( value, 'Expected less than 35 characters' )
        return value
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        self.validate_valueOf_(self.valueOf_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def validate_IdentificationSchemeName(self, value):
        if ( value == "IBAN" ):
            pass
        else:
            raise_value_error( value, 'Expected "IBAN"' )
        return value
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('IdentificationSchemeName', node)
        if value is not None and 'IdentificationSchemeName' not in already_processed:
            already_processed.add('IdentificationSchemeName')
            self.IdentificationSchemeName = value
            self.validate_IdentificationSchemeName(self.IdentificationSchemeName)
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
# end class SellerAccountIDType


class SellerBicType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('IdentificationSchemeName', 'xs:string', 0, 0, {'use': 'required'}),
        MemberSpec_('valueOf_', 'xs:string', 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, IdentificationSchemeName=None, valueOf_=None, extensiontype_=None):
        self.original_tagname_ = None
        self.IdentificationSchemeName = _cast(None, IdentificationSchemeName)
        self.valueOf_ = valueOf_
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerBicType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerBicType.subclass:
            return SellerBicType.subclass(*args_, **kwargs_)
        else:
            return SellerBicType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_IdentificationSchemeName(self): return self.IdentificationSchemeName
    def set_IdentificationSchemeName(self, IdentificationSchemeName): self.IdentificationSchemeName = IdentificationSchemeName
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerBicType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerBicType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerBicType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerBicType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerBicType'):
        if self.IdentificationSchemeName is not None and 'IdentificationSchemeName' not in already_processed:
            already_processed.add('IdentificationSchemeName')
            outfile.write(' IdentificationSchemeName=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.IdentificationSchemeName), input_name='IdentificationSchemeName')), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='SellerBicType', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('IdentificationSchemeName', node)
        if value is not None and 'IdentificationSchemeName' not in already_processed:
            already_processed.add('IdentificationSchemeName')
            self.IdentificationSchemeName = value
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    def validate_valueOf_(self, value):
        if ( isinstance( value, BaseStrType_ ) and 8 <= value.__len__() <= 11 ):
            pass
        else:
            raise_value_error( value, 'Expected value between 8..11 characters' )
        return value
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        self.validate_valueOf_(self.valueOf_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def validate_IdentificationSchemeName(self, value):
        if ( value == "BIC" ):
            pass
        else:
            raise_value_error( value, 'Expected "BIC"' )
        return value
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('IdentificationSchemeName', node)
        if value is not None and 'IdentificationSchemeName' not in already_processed:
            already_processed.add('IdentificationSchemeName')
            self.IdentificationSchemeName = value
            self.validate_IdentificationSchemeName(self.IdentificationSchemeName)
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
# end class SellerBicType


class SellerInvoiceDetailsType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('SellerDirectDebitIdentifier', ['genericStringType0_35', 'xs:string'], 0, 1, {'name': 'SellerDirectDebitIdentifier', 'minOccurs': '0', 'type': 'xs:string'}, None),
        MemberSpec_('PaymentInstructionIdentifier', ['genericStringType1_35', 'xs:string'], 0, 0, {'name': 'PaymentInstructionIdentifier', 'type': 'xs:string'}, None),
        MemberSpec_('SellerInstructionFreeText', 'SellerInstructionFreeTextType', 1, 1, {'name': 'SellerInstructionFreeText', 'minOccurs': '0', 'maxOccurs': '3', 'type': 'SellerInstructionFreeTextType'}, None),
        MemberSpec_('SellerInvoiceTypeDetails', 'SellerInvoiceTypeDetailsType', 1, 0, {'name': 'SellerInvoiceTypeDetails', 'maxOccurs': '3', 'type': 'SellerInvoiceTypeDetailsType'}, None),
        MemberSpec_('SellerServiceCode', ['SellerServiceCodeType', 'xs:NMTOKEN'], 0, 0, {'name': 'SellerServiceCode', 'type': 'xs:NMTOKEN'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, SellerDirectDebitIdentifier=None, PaymentInstructionIdentifier=None, SellerInstructionFreeText=None, SellerInvoiceTypeDetails=None, SellerServiceCode=None):
        self.original_tagname_ = None
        self.SellerDirectDebitIdentifier = SellerDirectDebitIdentifier
        self.validate_genericStringType0_35(self.SellerDirectDebitIdentifier)
        self.PaymentInstructionIdentifier = PaymentInstructionIdentifier
        self.validate_genericStringType1_35(self.PaymentInstructionIdentifier)
        if SellerInstructionFreeText is None:
            self.SellerInstructionFreeText = []
        else:
            self.SellerInstructionFreeText = SellerInstructionFreeText
        if SellerInvoiceTypeDetails is None:
            self.SellerInvoiceTypeDetails = []
        else:
            self.SellerInvoiceTypeDetails = SellerInvoiceTypeDetails
        self.SellerServiceCode = SellerServiceCode
        self.validate_SellerServiceCodeType(self.SellerServiceCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerInvoiceDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerInvoiceDetailsType.subclass:
            return SellerInvoiceDetailsType.subclass(*args_, **kwargs_)
        else:
            return SellerInvoiceDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SellerDirectDebitIdentifier(self): return self.SellerDirectDebitIdentifier
    def set_SellerDirectDebitIdentifier(self, SellerDirectDebitIdentifier): self.SellerDirectDebitIdentifier = SellerDirectDebitIdentifier
    def get_PaymentInstructionIdentifier(self): return self.PaymentInstructionIdentifier
    def set_PaymentInstructionIdentifier(self, PaymentInstructionIdentifier): self.PaymentInstructionIdentifier = PaymentInstructionIdentifier
    def get_SellerInstructionFreeText(self): return self.SellerInstructionFreeText
    def set_SellerInstructionFreeText(self, SellerInstructionFreeText): self.SellerInstructionFreeText = SellerInstructionFreeText
    def add_SellerInstructionFreeText(self, value): self.SellerInstructionFreeText.append(value)
    def insert_SellerInstructionFreeText_at(self, index, value): self.SellerInstructionFreeText.insert(index, value)
    def replace_SellerInstructionFreeText_at(self, index, value): self.SellerInstructionFreeText[index] = value
    def get_SellerInvoiceTypeDetails(self): return self.SellerInvoiceTypeDetails
    def set_SellerInvoiceTypeDetails(self, SellerInvoiceTypeDetails): self.SellerInvoiceTypeDetails = SellerInvoiceTypeDetails
    def add_SellerInvoiceTypeDetails(self, value): self.SellerInvoiceTypeDetails.append(value)
    def insert_SellerInvoiceTypeDetails_at(self, index, value): self.SellerInvoiceTypeDetails.insert(index, value)
    def replace_SellerInvoiceTypeDetails_at(self, index, value): self.SellerInvoiceTypeDetails[index] = value
    def get_SellerServiceCode(self): return self.SellerServiceCode
    def set_SellerServiceCode(self, SellerServiceCode): self.SellerServiceCode = SellerServiceCode
    def validate_genericStringType0_35(self, value):
        # Validate type genericStringType0_35, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType0_35' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType0_35' % {"value" : value.encode("utf-8")} )
    def validate_genericStringType1_35(self, value):
        # Validate type genericStringType1_35, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType1_35' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType1_35' % {"value" : value.encode("utf-8")} )
    def validate_SellerServiceCodeType(self, value):
        # Validate type SellerServiceCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['00', '01', '02']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SellerServiceCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.SellerDirectDebitIdentifier is not None or
            self.PaymentInstructionIdentifier is not None or
            self.SellerInstructionFreeText or
            self.SellerInvoiceTypeDetails or
            self.SellerServiceCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerInvoiceDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerInvoiceDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerInvoiceDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerInvoiceDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerInvoiceDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SellerInvoiceDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SellerDirectDebitIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerDirectDebitIdentifier>%s</%sSellerDirectDebitIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellerDirectDebitIdentifier), input_name='SellerDirectDebitIdentifier')), namespace_, eol_))
        if self.PaymentInstructionIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sPaymentInstructionIdentifier>%s</%sPaymentInstructionIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.PaymentInstructionIdentifier), input_name='PaymentInstructionIdentifier')), namespace_, eol_))
        for SellerInstructionFreeText_ in self.SellerInstructionFreeText:
            SellerInstructionFreeText_.export(outfile, level, namespace_, name_='SellerInstructionFreeText', pretty_print=pretty_print)
        for SellerInvoiceTypeDetails_ in self.SellerInvoiceTypeDetails:
            SellerInvoiceTypeDetails_.export(outfile, level, namespace_, name_='SellerInvoiceTypeDetails', pretty_print=pretty_print)
        if self.SellerServiceCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerServiceCode>%s</%sSellerServiceCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellerServiceCode), input_name='SellerServiceCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SellerDirectDebitIdentifier':
            SellerDirectDebitIdentifier_ = child_.text
            SellerDirectDebitIdentifier_ = self.gds_validate_string(SellerDirectDebitIdentifier_, node, 'SellerDirectDebitIdentifier')
            self.SellerDirectDebitIdentifier = SellerDirectDebitIdentifier_
            # validate type genericStringType0_35
            self.validate_genericStringType0_35(self.SellerDirectDebitIdentifier)
        elif nodeName_ == 'PaymentInstructionIdentifier':
            PaymentInstructionIdentifier_ = child_.text
            PaymentInstructionIdentifier_ = self.gds_validate_string(PaymentInstructionIdentifier_, node, 'PaymentInstructionIdentifier')
            self.PaymentInstructionIdentifier = PaymentInstructionIdentifier_
            # validate type genericStringType1_35
            self.validate_genericStringType1_35(self.PaymentInstructionIdentifier)
        elif nodeName_ == 'SellerInstructionFreeText':
            obj_ = SellerInstructionFreeTextType.factory()
            obj_.build(child_)
            self.SellerInstructionFreeText.append(obj_)
            obj_.original_tagname_ = 'SellerInstructionFreeText'
        elif nodeName_ == 'SellerInvoiceTypeDetails':
            obj_ = SellerInvoiceTypeDetailsType.factory()
            obj_.build(child_)
            self.SellerInvoiceTypeDetails.append(obj_)
            obj_.original_tagname_ = 'SellerInvoiceTypeDetails'
        elif nodeName_ == 'SellerServiceCode':
            SellerServiceCode_ = child_.text
            SellerServiceCode_ = self.gds_validate_string(SellerServiceCode_, node, 'SellerServiceCode')
            self.SellerServiceCode = SellerServiceCode_
            # validate type SellerServiceCodeType
            self.validate_SellerServiceCodeType(self.SellerServiceCode)
    def validate_SellerInstructionFreeTextType(self, value):
        if ( value.__len__() <= 3 ):
            pass
        else:
            raise_value_error( value.__len__(), 'Expected maximum of 3 elements' )
        return value
    def validate_SellerInvoiceTypeDetailsType(self, value):
        if ( value.__len__() <= 3 ):
            pass
        else:
            raise_value_error( value.__len__(), 'Expected maximum of 3 elements' )
        return value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SellerDirectDebitIdentifier':
            SellerDirectDebitIdentifier_ = child_.text
            SellerDirectDebitIdentifier_ = self.gds_validate_string(SellerDirectDebitIdentifier_, node, 'SellerDirectDebitIdentifier')
            self.SellerDirectDebitIdentifier = SellerDirectDebitIdentifier_
            self.validate_genericStringType0_35(self.SellerDirectDebitIdentifier)    # validate type genericStringType0_35
        elif nodeName_ == 'PaymentInstructionIdentifier':
            PaymentInstructionIdentifier_ = child_.text
            PaymentInstructionIdentifier_ = self.gds_validate_string(PaymentInstructionIdentifier_, node, 'PaymentInstructionIdentifier')
            self.PaymentInstructionIdentifier = PaymentInstructionIdentifier_
            self.validate_genericStringType1_35(self.PaymentInstructionIdentifier)    # validate type genericStringType1_35
        elif nodeName_ == 'SellerInstructionFreeText':
            obj_ = SellerInstructionFreeTextType.factory()
            obj_.build(child_)
            self.SellerInstructionFreeText.append(obj_)
            self.validate_SellerInstructionFreeTextType(self.SellerInstructionFreeText)
            obj_.original_tagname_ = 'SellerInstructionFreeText'
        elif nodeName_ == 'SellerInvoiceTypeDetails':
            obj_ = SellerInvoiceTypeDetailsType.factory()
            obj_.build(child_)
            self.SellerInvoiceTypeDetails.append(obj_)
            self.validate_SellerInvoiceTypeDetailsType(self.SellerInvoiceTypeDetails)
            obj_.original_tagname_ = 'SellerInvoiceTypeDetails'
        elif nodeName_ == 'SellerServiceCode':
            SellerServiceCode_ = child_.text
            SellerServiceCode_ = self.gds_validate_string(SellerServiceCode_, node, 'SellerServiceCode')
            self.SellerServiceCode = SellerServiceCode_
            self.validate_SellerServiceCodeType(self.SellerServiceCode)    # validate type SellerServiceCodeType
# end class SellerInvoiceDetailsType


class SellerPartyDetailsType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('SellerPartyIdentifier', ['genericStringType1_48', 'xs:string'], 0, 0, {'name': 'SellerPartyIdentifier', 'type': 'xs:string'}, None),
        MemberSpec_('SellerOrganisationNames', 'SellerOrganisationNamesType', 1, 0, {'name': 'SellerOrganisationNames', 'maxOccurs': '3', 'type': 'SellerOrganisationNamesType'}, None),
        MemberSpec_('SellerOrganisationBankName', ['genericStringType1_35', 'xs:string'], 1, 1, {'name': 'SellerOrganisationBankName', 'minOccurs': '0', 'maxOccurs': '2', 'type': 'xs:string'}, None),
        MemberSpec_('SellerPostalAddressDetails', 'SellerPostalAddressDetailsType', 0, 1, {'name': 'SellerPostalAddressDetails', 'minOccurs': '0', 'type': 'SellerPostalAddressDetailsType'}, None),
        MemberSpec_('IndustryCode', ['genericStringType0_6', 'xs:string'], 0, 1, {'name': 'IndustryCode', 'minOccurs': '0', 'type': 'xs:string'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, SellerPartyIdentifier=None, SellerOrganisationNames=None, SellerOrganisationBankName=None, SellerPostalAddressDetails=None, IndustryCode=None):
        self.original_tagname_ = None
        self.SellerPartyIdentifier = SellerPartyIdentifier
        self.validate_genericStringType1_48(self.SellerPartyIdentifier)
        if SellerOrganisationNames is None:
            self.SellerOrganisationNames = []
        else:
            self.SellerOrganisationNames = SellerOrganisationNames
        if SellerOrganisationBankName is None:
            self.SellerOrganisationBankName = []
        else:
            self.SellerOrganisationBankName = SellerOrganisationBankName
        self.SellerPostalAddressDetails = SellerPostalAddressDetails
        self.IndustryCode = IndustryCode
        self.validate_genericStringType0_6(self.IndustryCode)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerPartyDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerPartyDetailsType.subclass:
            return SellerPartyDetailsType.subclass(*args_, **kwargs_)
        else:
            return SellerPartyDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SellerPartyIdentifier(self): return self.SellerPartyIdentifier
    def set_SellerPartyIdentifier(self, SellerPartyIdentifier): self.SellerPartyIdentifier = SellerPartyIdentifier
    def get_SellerOrganisationNames(self): return self.SellerOrganisationNames
    def set_SellerOrganisationNames(self, SellerOrganisationNames): self.SellerOrganisationNames = SellerOrganisationNames
    def add_SellerOrganisationNames(self, value): self.SellerOrganisationNames.append(value)
    def insert_SellerOrganisationNames_at(self, index, value): self.SellerOrganisationNames.insert(index, value)
    def replace_SellerOrganisationNames_at(self, index, value): self.SellerOrganisationNames[index] = value
    def get_SellerOrganisationBankName(self): return self.SellerOrganisationBankName
    def set_SellerOrganisationBankName(self, SellerOrganisationBankName): self.SellerOrganisationBankName = SellerOrganisationBankName
    def add_SellerOrganisationBankName(self, value): self.SellerOrganisationBankName.append(value)
    def insert_SellerOrganisationBankName_at(self, index, value): self.SellerOrganisationBankName.insert(index, value)
    def replace_SellerOrganisationBankName_at(self, index, value): self.SellerOrganisationBankName[index] = value
    def get_SellerPostalAddressDetails(self): return self.SellerPostalAddressDetails
    def set_SellerPostalAddressDetails(self, SellerPostalAddressDetails): self.SellerPostalAddressDetails = SellerPostalAddressDetails
    def get_IndustryCode(self): return self.IndustryCode
    def set_IndustryCode(self, IndustryCode): self.IndustryCode = IndustryCode
    def validate_genericStringType1_48(self, value):
        # Validate type genericStringType1_48, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 48:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType1_48' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType1_48' % {"value" : value.encode("utf-8")} )
    def validate_genericStringType1_35(self, value):
        # Validate type genericStringType1_35, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType1_35' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType1_35' % {"value" : value.encode("utf-8")} )
    def validate_genericStringType0_6(self, value):
        # Validate type genericStringType0_6, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 6:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType0_6' % {"value" : value.encode("utf-8")} )
            if len(value) < 0:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType0_6' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.SellerPartyIdentifier is not None or
            self.SellerOrganisationNames or
            self.SellerOrganisationBankName or
            self.SellerPostalAddressDetails is not None or
            self.IndustryCode is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerPartyDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerPartyDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerPartyDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerPartyDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerPartyDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SellerPartyDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SellerPartyIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerPartyIdentifier>%s</%sSellerPartyIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellerPartyIdentifier), input_name='SellerPartyIdentifier')), namespace_, eol_))
        for SellerOrganisationNames_ in self.SellerOrganisationNames:
            SellerOrganisationNames_.export(outfile, level, namespace_, name_='SellerOrganisationNames', pretty_print=pretty_print)
        for SellerOrganisationBankName_ in self.SellerOrganisationBankName:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerOrganisationBankName>%s</%sSellerOrganisationBankName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(SellerOrganisationBankName_), input_name='SellerOrganisationBankName')), namespace_, eol_))
        if self.SellerPostalAddressDetails is not None:
            self.SellerPostalAddressDetails.export(outfile, level, namespace_, name_='SellerPostalAddressDetails', pretty_print=pretty_print)
        if self.IndustryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sIndustryCode>%s</%sIndustryCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.IndustryCode), input_name='IndustryCode')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SellerPartyIdentifier':
            SellerPartyIdentifier_ = child_.text
            SellerPartyIdentifier_ = self.gds_validate_string(SellerPartyIdentifier_, node, 'SellerPartyIdentifier')
            self.SellerPartyIdentifier = SellerPartyIdentifier_
            # validate type genericStringType1_48
            self.validate_genericStringType1_48(self.SellerPartyIdentifier)
        elif nodeName_ == 'SellerOrganisationNames':
            obj_ = SellerOrganisationNamesType.factory()
            obj_.build(child_)
            self.SellerOrganisationNames.append(obj_)
            obj_.original_tagname_ = 'SellerOrganisationNames'
        elif nodeName_ == 'SellerOrganisationBankName':
            SellerOrganisationBankName_ = child_.text
            SellerOrganisationBankName_ = self.gds_validate_string(SellerOrganisationBankName_, node, 'SellerOrganisationBankName')
            self.SellerOrganisationBankName.append(SellerOrganisationBankName_)
            # validate type genericStringType1_35
            self.validate_genericStringType1_35(self.SellerOrganisationBankName[-1])
        elif nodeName_ == 'SellerPostalAddressDetails':
            obj_ = SellerPostalAddressDetailsType.factory()
            obj_.build(child_)
            self.SellerPostalAddressDetails = obj_
            obj_.original_tagname_ = 'SellerPostalAddressDetails'
        elif nodeName_ == 'IndustryCode':
            IndustryCode_ = child_.text
            IndustryCode_ = self.gds_validate_string(IndustryCode_, node, 'IndustryCode')
            self.IndustryCode = IndustryCode_
            # validate type genericStringType0_6
            self.validate_genericStringType0_6(self.IndustryCode)
    def validate_SellerOrganisationNamesType(self, value):
        if ( value.__len__() <= 3 ):
            pass
        else:
            raise_value_error( value.__len__(), 'Expected maximum of 3 elements' )
        return value
    def validate_SellerOrganisationBankName(self, value):
        if ( value.__len__() <= 2 ):
            pass
        else:
            raise_value_error( value.__len__(), 'Expected maximum of 3 elements' )
        return value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SellerPartyIdentifier':
            SellerPartyIdentifier_ = child_.text
            SellerPartyIdentifier_ = self.gds_validate_string(SellerPartyIdentifier_, node, 'SellerPartyIdentifier')
            self.SellerPartyIdentifier = SellerPartyIdentifier_
            self.validate_genericStringType1_48(self.SellerPartyIdentifier)    # validate type genericStringType1_48
        elif nodeName_ == 'SellerOrganisationNames':
            obj_ = SellerOrganisationNamesType.factory()
            obj_.build(child_)
            self.SellerOrganisationNames.append(obj_)
            self.validate_SellerOrganisationNamesType(self.SellerOrganisationNames)
            obj_.original_tagname_ = 'SellerOrganisationNames'
        elif nodeName_ == 'SellerOrganisationBankName':
            SellerOrganisationBankName_ = child_.text
            SellerOrganisationBankName_ = self.gds_validate_string(SellerOrganisationBankName_, node, 'SellerOrganisationBankName')
            self.SellerOrganisationBankName.append(SellerOrganisationBankName_)
            self.validate_genericStringType1_35(self.SellerOrganisationBankName)    # validate type genericStringType1_35
            self.validate_SellerOrganisationBankName(self.SellerOrganisationBankName)
        elif nodeName_ == 'SellerPostalAddressDetails':
            obj_ = SellerPostalAddressDetailsType.factory()
            obj_.build(child_)
            self.SellerPostalAddressDetails = obj_
            obj_.original_tagname_ = 'SellerPostalAddressDetails'
        elif nodeName_ == 'IndustryCode':
            IndustryCode_ = child_.text
            IndustryCode_ = self.gds_validate_string(IndustryCode_, node, 'IndustryCode')
            self.IndustryCode = IndustryCode_
            self.validate_genericStringType0_6(self.IndustryCode)    # validate type genericStringType0_6
# end class SellerPartyDetailsType


class SellerOrganisationNamesType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('LanguageCode', 'LanguageCodeType', 0, 0, {'use': 'required'}),
        MemberSpec_('SellerOrganisationName', ['genericStringType2_70', 'xs:string'], 1, 0, {'name': 'SellerOrganisationName', 'maxOccurs': '2', 'type': 'xs:string'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, SellerOrganisationName=None):
        self.original_tagname_ = None
        self.LanguageCode = _cast(None, LanguageCode)
        if SellerOrganisationName is None:
            self.SellerOrganisationName = []
        else:
            self.SellerOrganisationName = SellerOrganisationName
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerOrganisationNamesType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerOrganisationNamesType.subclass:
            return SellerOrganisationNamesType.subclass(*args_, **kwargs_)
        else:
            return SellerOrganisationNamesType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SellerOrganisationName(self): return self.SellerOrganisationName
    def set_SellerOrganisationName(self, SellerOrganisationName): self.SellerOrganisationName = SellerOrganisationName
    def add_SellerOrganisationName(self, value): self.SellerOrganisationName.append(value)
    def insert_SellerOrganisationName_at(self, index, value): self.SellerOrganisationName.insert(index, value)
    def replace_SellerOrganisationName_at(self, index, value): self.SellerOrganisationName[index] = value
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def validate_genericStringType2_70(self, value):
        # Validate type genericStringType2_70, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 70:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType2_70' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType2_70' % {"value" : value.encode("utf-8")} )
    def validate_LanguageCodeType(self, value):
        # Validate type LanguageCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FI', 'SV', 'SE', 'EN']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LanguageCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            self.SellerOrganisationName
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerOrganisationNamesType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerOrganisationNamesType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerOrganisationNamesType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerOrganisationNamesType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerOrganisationNamesType'):
        if self.LanguageCode is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            outfile.write(' LanguageCode=%s' % (quote_attrib(self.LanguageCode), ))
    def exportChildren(self, outfile, level, namespace_='', name_='SellerOrganisationNamesType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        for SellerOrganisationName_ in self.SellerOrganisationName:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerOrganisationName>%s</%sSellerOrganisationName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(SellerOrganisationName_), input_name='SellerOrganisationName')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('LanguageCode', node)
        if value is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            self.LanguageCode = value
            self.validate_LanguageCodeType(self.LanguageCode)    # validate type LanguageCodeType
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SellerOrganisationName':
            SellerOrganisationName_ = child_.text
            SellerOrganisationName_ = self.gds_validate_string(SellerOrganisationName_, node, 'SellerOrganisationName')
            self.SellerOrganisationName.append(SellerOrganisationName_)
            # validate type genericStringType2_70
            self.validate_genericStringType2_70(self.SellerOrganisationName[-1])
    def validate_SellerOrganisationName(self, value):
        if ( value.__len__() <= 2 ):
            pass
        else:
            raise_value_error( value.__len__(), 'Expected maximum of 2 elements' )
        return value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SellerOrganisationName':
            SellerOrganisationName_ = child_.text
            SellerOrganisationName_ = self.gds_validate_string(SellerOrganisationName_, node, 'SellerOrganisationName')
            self.SellerOrganisationName.append(SellerOrganisationName_)
            self.validate_genericStringType2_70(self.SellerOrganisationName)    # validate type genericStringType2_70
            self.validate_SellerOrganisationName(self.SellerOrganisationName)
# end class SellerOrganisationNamesType


class SellerPostalAddressDetailsType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('SellerStreetName', ['genericStringType2_35', 'xs:string'], 0, 0, {'name': 'SellerStreetName', 'type': 'xs:string'}, None),
        MemberSpec_('SellerTownName', ['genericStringType2_35', 'xs:string'], 0, 0, {'name': 'SellerTownName', 'type': 'xs:string'}, None),
        MemberSpec_('SellerPostCodeIdentifier', ['genericStringType1_48', 'xs:string'], 0, 0, {'name': 'SellerPostCodeIdentifier', 'type': 'xs:string'}, None),
        MemberSpec_('CountryCode', ['CountryCodeType', 'xs:NMTOKEN'], 0, 1, {'name': 'CountryCode', 'minOccurs': '0', 'type': 'xs:NMTOKEN'}, None),
        MemberSpec_('CountryName', ['genericStringType2_35', 'xs:string'], 0, 1, {'name': 'CountryName', 'minOccurs': '0', 'type': 'xs:string'}, None),
        MemberSpec_('SellerPostOfficeBoxIdentifier', ['genericStringType1_48', 'xs:string'], 0, 1, {'name': 'SellerPostOfficeBoxIdentifier', 'minOccurs': '0', 'type': 'xs:string'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, SellerStreetName=None, SellerTownName=None, SellerPostCodeIdentifier=None, CountryCode=None, CountryName=None, SellerPostOfficeBoxIdentifier=None):
        self.original_tagname_ = None
        self.SellerStreetName = SellerStreetName
        self.validate_genericStringType2_35(self.SellerStreetName)
        self.SellerTownName = SellerTownName
        self.validate_genericStringType2_35(self.SellerTownName)
        self.SellerPostCodeIdentifier = SellerPostCodeIdentifier
        self.validate_genericStringType1_48(self.SellerPostCodeIdentifier)
        self.CountryCode = CountryCode
        self.validate_CountryCodeType(self.CountryCode)
        self.CountryName = CountryName
        self.validate_genericStringType2_35(self.CountryName)
        self.SellerPostOfficeBoxIdentifier = SellerPostOfficeBoxIdentifier
        self.validate_genericStringType1_48(self.SellerPostOfficeBoxIdentifier)
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerPostalAddressDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerPostalAddressDetailsType.subclass:
            return SellerPostalAddressDetailsType.subclass(*args_, **kwargs_)
        else:
            return SellerPostalAddressDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SellerStreetName(self): return self.SellerStreetName
    def set_SellerStreetName(self, SellerStreetName): self.SellerStreetName = SellerStreetName
    def get_SellerTownName(self): return self.SellerTownName
    def set_SellerTownName(self, SellerTownName): self.SellerTownName = SellerTownName
    def get_SellerPostCodeIdentifier(self): return self.SellerPostCodeIdentifier
    def set_SellerPostCodeIdentifier(self, SellerPostCodeIdentifier): self.SellerPostCodeIdentifier = SellerPostCodeIdentifier
    def get_CountryCode(self): return self.CountryCode
    def set_CountryCode(self, CountryCode): self.CountryCode = CountryCode
    def get_CountryName(self): return self.CountryName
    def set_CountryName(self, CountryName): self.CountryName = CountryName
    def get_SellerPostOfficeBoxIdentifier(self): return self.SellerPostOfficeBoxIdentifier
    def set_SellerPostOfficeBoxIdentifier(self, SellerPostOfficeBoxIdentifier): self.SellerPostOfficeBoxIdentifier = SellerPostOfficeBoxIdentifier
    def validate_genericStringType2_35(self, value):
        # Validate type genericStringType2_35, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 35:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType2_35' % {"value" : value.encode("utf-8")} )
            if len(value) < 2:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType2_35' % {"value" : value.encode("utf-8")} )
    def validate_genericStringType1_48(self, value):
        # Validate type genericStringType1_48, a restriction on xs:string.
        if value is not None and Validate_simpletypes_:
            if len(value) > 48:
                warnings_.warn('Value "%(value)s" does not match xsd maxLength restriction on genericStringType1_48' % {"value" : value.encode("utf-8")} )
            if len(value) < 1:
                warnings_.warn('Value "%(value)s" does not match xsd minLength restriction on genericStringType1_48' % {"value" : value.encode("utf-8")} )
    def validate_CountryCodeType(self, value):
        # Validate type CountryCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            if len(str(value)) != 2:
                warnings_.warn('Value "%(value)s" does not match xsd length restriction on CountryCodeType' % {"value" : value} )
    def hasContent_(self):
        if (
            self.SellerStreetName is not None or
            self.SellerTownName is not None or
            self.SellerPostCodeIdentifier is not None or
            self.CountryCode is not None or
            self.CountryName is not None or
            self.SellerPostOfficeBoxIdentifier is not None
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerPostalAddressDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerPostalAddressDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerPostalAddressDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerPostalAddressDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerPostalAddressDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SellerPostalAddressDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SellerStreetName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerStreetName>%s</%sSellerStreetName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellerStreetName), input_name='SellerStreetName')), namespace_, eol_))
        if self.SellerTownName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerTownName>%s</%sSellerTownName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellerTownName), input_name='SellerTownName')), namespace_, eol_))
        if self.SellerPostCodeIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerPostCodeIdentifier>%s</%sSellerPostCodeIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellerPostCodeIdentifier), input_name='SellerPostCodeIdentifier')), namespace_, eol_))
        if self.CountryCode is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryCode>%s</%sCountryCode>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CountryCode), input_name='CountryCode')), namespace_, eol_))
        if self.CountryName is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sCountryName>%s</%sCountryName>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.CountryName), input_name='CountryName')), namespace_, eol_))
        if self.SellerPostOfficeBoxIdentifier is not None:
            showIndent(outfile, level, pretty_print)
            outfile.write('<%sSellerPostOfficeBoxIdentifier>%s</%sSellerPostOfficeBoxIdentifier>%s' % (namespace_, self.gds_encode(self.gds_format_string(quote_xml(self.SellerPostOfficeBoxIdentifier), input_name='SellerPostOfficeBoxIdentifier')), namespace_, eol_))
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SellerStreetName':
            SellerStreetName_ = child_.text
            SellerStreetName_ = self.gds_validate_string(SellerStreetName_, node, 'SellerStreetName')
            self.SellerStreetName = SellerStreetName_
            # validate type genericStringType2_35
            self.validate_genericStringType2_35(self.SellerStreetName)
        elif nodeName_ == 'SellerTownName':
            SellerTownName_ = child_.text
            SellerTownName_ = self.gds_validate_string(SellerTownName_, node, 'SellerTownName')
            self.SellerTownName = SellerTownName_
            # validate type genericStringType2_35
            self.validate_genericStringType2_35(self.SellerTownName)
        elif nodeName_ == 'SellerPostCodeIdentifier':
            SellerPostCodeIdentifier_ = child_.text
            SellerPostCodeIdentifier_ = self.gds_validate_string(SellerPostCodeIdentifier_, node, 'SellerPostCodeIdentifier')
            self.SellerPostCodeIdentifier = SellerPostCodeIdentifier_
            # validate type genericStringType1_48
            self.validate_genericStringType1_48(self.SellerPostCodeIdentifier)
        elif nodeName_ == 'CountryCode':
            CountryCode_ = child_.text
            CountryCode_ = self.gds_validate_string(CountryCode_, node, 'CountryCode')
            self.CountryCode = CountryCode_
            # validate type CountryCodeType
            self.validate_CountryCodeType(self.CountryCode)
        elif nodeName_ == 'CountryName':
            CountryName_ = child_.text
            CountryName_ = self.gds_validate_string(CountryName_, node, 'CountryName')
            self.CountryName = CountryName_
            # validate type genericStringType2_35
            self.validate_genericStringType2_35(self.CountryName)
        elif nodeName_ == 'SellerPostOfficeBoxIdentifier':
            SellerPostOfficeBoxIdentifier_ = child_.text
            SellerPostOfficeBoxIdentifier_ = self.gds_validate_string(SellerPostOfficeBoxIdentifier_, node, 'SellerPostOfficeBoxIdentifier')
            self.SellerPostOfficeBoxIdentifier = SellerPostOfficeBoxIdentifier_
            # validate type genericStringType1_48
            self.validate_genericStringType1_48(self.SellerPostOfficeBoxIdentifier)
# end class SellerPostalAddressDetailsType


class date(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('Format', 'xs:string', 0, 1, {'use': 'optional'}),
        MemberSpec_('valueOf_', ['dateType', 'xs:integer'], 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, Format=None, valueOf_=None):
        self.original_tagname_ = None
        self.Format = _cast(None, Format)
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, date)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if date.subclass:
            return date.subclass(*args_, **kwargs_)
        else:
            return date(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_Format(self): return self.Format
    def set_Format(self, Format): self.Format = Format
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='date', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('date')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='date')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='date', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='date'):
        if self.Format is not None and 'Format' not in already_processed:
            already_processed.add('Format')
            outfile.write(' Format=%s' % (self.gds_encode(self.gds_format_string(quote_attrib(self.Format), input_name='Format')), ))
    def exportChildren(self, outfile, level, namespace_='', name_='date', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Format', node)
        if value is not None and 'Format' not in already_processed:
            already_processed.add('Format')
            self.Format = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    def validate_valueOf_(self, value):
        import datetime
        if ( datetime.datetime.strptime( value, '%Y%m%d' ).strftime( '%Y%m%d' ) == value ):
            pass
        else:
            raise_value_error( value, 'Time format does not match' )
        return value
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        self.validate_valueOf_(self.valueOf_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def validate_Format(self, value):
        if ( value == "CCYYMMDD" ):
            pass
        else:
            raise_value_error( value, 'Expected "CCYYMMDD"' )
        return value
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('Format', node)
        if value is not None and 'Format' not in already_processed:
            already_processed.add('Format')
            self.Format = value
            self.validate_Format(self.Format)
# end class date


class TextLanguageOptional(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('LanguageCode', 'LanguageCodeType', 0, 1, {'use': 'optional'}),
        MemberSpec_('valueOf_', 'xs:string', 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, valueOf_=None, extensiontype_=None):
        self.original_tagname_ = None
        self.LanguageCode = _cast(None, LanguageCode)
        self.valueOf_ = valueOf_
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TextLanguageOptional)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TextLanguageOptional.subclass:
            return TextLanguageOptional.subclass(*args_, **kwargs_)
        else:
            return TextLanguageOptional(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_LanguageCodeType(self, value):
        # Validate type LanguageCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FI', 'SV', 'SE', 'EN']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LanguageCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TextLanguageOptional', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TextLanguageOptional')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TextLanguageOptional')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TextLanguageOptional', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TextLanguageOptional'):
        if self.LanguageCode is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            outfile.write(' LanguageCode=%s' % (quote_attrib(self.LanguageCode), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='TextLanguageOptional', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('LanguageCode', node)
        if value is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            self.LanguageCode = value
            self.validate_LanguageCodeType(self.LanguageCode)    # validate type LanguageCodeType
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TextLanguageOptional


class TextLanguageRequired(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('LanguageCode', 'LanguageCodeType', 0, 0, {'use': 'required'}),
        MemberSpec_('valueOf_', 'xs:string', 0),
    ]
    subclass = None
    superclass = None
    def __init__(self, LanguageCode=None, valueOf_=None, extensiontype_=None):
        self.original_tagname_ = None
        self.LanguageCode = _cast(None, LanguageCode)
        self.valueOf_ = valueOf_
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, TextLanguageRequired)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if TextLanguageRequired.subclass:
            return TextLanguageRequired.subclass(*args_, **kwargs_)
        else:
            return TextLanguageRequired(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_LanguageCode(self): return self.LanguageCode
    def set_LanguageCode(self, LanguageCode): self.LanguageCode = LanguageCode
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_LanguageCodeType(self, value):
        # Validate type LanguageCodeType, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['FI', 'SV', 'SE', 'EN']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on LanguageCodeType' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_)
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='TextLanguageRequired', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('TextLanguageRequired')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='TextLanguageRequired')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='TextLanguageRequired', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='TextLanguageRequired'):
        if self.LanguageCode is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            outfile.write(' LanguageCode=%s' % (quote_attrib(self.LanguageCode), ))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='TextLanguageRequired', fromsubclass_=False, pretty_print=True):
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('LanguageCode', node)
        if value is not None and 'LanguageCode' not in already_processed:
            already_processed.add('LanguageCode')
            self.LanguageCode = value
            self.validate_LanguageCodeType(self.LanguageCode)    # validate type LanguageCodeType
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class TextLanguageRequired


class SellerAccountIDType1(SellerAccountIDType):
    member_data_items_ = [
        MemberSpec_('valueOf_', 'SellerAccountIDType', 0),
    ]
    subclass = None
    superclass = SellerAccountIDType
    def __init__(self, IdentificationSchemeName=None, valueOf_=None):
        self.original_tagname_ = None
        super(SellerAccountIDType1, self).__init__(IdentificationSchemeName, valueOf_, )
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerAccountIDType1)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerAccountIDType1.subclass:
            return SellerAccountIDType1.subclass(*args_, **kwargs_)
        else:
            return SellerAccountIDType1(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(SellerAccountIDType1, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerAccountIDType1', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerAccountIDType1')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerAccountIDType1')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerAccountIDType1', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerAccountIDType1'):
        super(SellerAccountIDType1, self).exportAttributes(outfile, level, already_processed, namespace_, name_='SellerAccountIDType1')
    def exportChildren(self, outfile, level, namespace_='', name_='SellerAccountIDType1', fromsubclass_=False, pretty_print=True):
        super(SellerAccountIDType1, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(SellerAccountIDType1, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    def validate_valueOf_(self, value):
        if ( isinstance( value, BaseStrType_ ) and value.__len__() <= 35 ):
            pass
        else:
            raise_value_error( value, 'Expected less than 35 characters' )
        return value
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        self.validate_valueOf_(self.valueOf_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def validate_IdentificationSchemeName(self, value):
        if ( value == "IBAN" ):
            pass
        else:
            raise_value_error( value, 'Expected "IBAN"' )
        return value
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('IdentificationSchemeName', node)
        if value is not None and 'IdentificationSchemeName' not in already_processed:
            already_processed.add('IdentificationSchemeName')
            self.IdentificationSchemeName = value
            self.validate_IdentificationSchemeName(self.IdentificationSchemeName)
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
# end class SellerAccountIDType1


class SellerBicType2(SellerBicType):
    member_data_items_ = [
        MemberSpec_('valueOf_', 'SellerBicType', 0),
    ]
    subclass = None
    superclass = SellerBicType
    def __init__(self, IdentificationSchemeName=None, valueOf_=None):
        self.original_tagname_ = None
        super(SellerBicType2, self).__init__(IdentificationSchemeName, valueOf_, )
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerBicType2)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerBicType2.subclass:
            return SellerBicType2.subclass(*args_, **kwargs_)
        else:
            return SellerBicType2(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(SellerBicType2, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerBicType2', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerBicType2')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerBicType2')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerBicType2', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerBicType2'):
        super(SellerBicType2, self).exportAttributes(outfile, level, already_processed, namespace_, name_='SellerBicType2')
    def exportChildren(self, outfile, level, namespace_='', name_='SellerBicType2', fromsubclass_=False, pretty_print=True):
        super(SellerBicType2, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(SellerBicType2, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    def validate_valueOf_(self, value):
        if ( isinstance( value, BaseStrType_ ) and 8 <= value.__len__() <= 11 ):
            pass
        else:
            raise_value_error( value, 'Expected value between 8..11 characters' )
        return value
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        self.validate_valueOf_(self.valueOf_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def validate_IdentificationSchemeName(self, value):
        if ( value == "BIC" ):
            pass
        else:
            raise_value_error( value, 'Expected "BIC"' )
        return value
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('IdentificationSchemeName', node)
        if value is not None and 'IdentificationSchemeName' not in already_processed:
            already_processed.add('IdentificationSchemeName')
            self.IdentificationSchemeName = value
            self.validate_IdentificationSchemeName(self.IdentificationSchemeName)
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
# end class SellerBicType2


class NewSellerAccountIDType(SellerAccountIDType):
    member_data_items_ = [
        MemberSpec_('valueOf_', 'SellerAccountIDType', 0),
    ]
    subclass = None
    superclass = SellerAccountIDType
    def __init__(self, IdentificationSchemeName=None, valueOf_=None):
        self.original_tagname_ = None
        super(NewSellerAccountIDType, self).__init__(IdentificationSchemeName, valueOf_, )
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NewSellerAccountIDType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NewSellerAccountIDType.subclass:
            return NewSellerAccountIDType.subclass(*args_, **kwargs_)
        else:
            return NewSellerAccountIDType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(NewSellerAccountIDType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NewSellerAccountIDType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NewSellerAccountIDType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NewSellerAccountIDType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NewSellerAccountIDType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NewSellerAccountIDType'):
        super(NewSellerAccountIDType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='NewSellerAccountIDType')
    def exportChildren(self, outfile, level, namespace_='', name_='NewSellerAccountIDType', fromsubclass_=False, pretty_print=True):
        super(NewSellerAccountIDType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(NewSellerAccountIDType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class NewSellerAccountIDType


class NewSellerBicType(SellerBicType):
    member_data_items_ = [
        MemberSpec_('valueOf_', 'SellerBicType', 0),
    ]
    subclass = None
    superclass = SellerBicType
    def __init__(self, IdentificationSchemeName=None, valueOf_=None):
        self.original_tagname_ = None
        super(NewSellerBicType, self).__init__(IdentificationSchemeName, valueOf_, )
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, NewSellerBicType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if NewSellerBicType.subclass:
            return NewSellerBicType.subclass(*args_, **kwargs_)
        else:
            return NewSellerBicType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(NewSellerBicType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='NewSellerBicType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('NewSellerBicType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='NewSellerBicType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='NewSellerBicType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='NewSellerBicType'):
        super(NewSellerBicType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='NewSellerBicType')
    def exportChildren(self, outfile, level, namespace_='', name_='NewSellerBicType', fromsubclass_=False, pretty_print=True):
        super(NewSellerBicType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(NewSellerBicType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class NewSellerBicType


class SellerInstructionFreeTextType(TextLanguageOptional):
    member_data_items_ = [
        MemberSpec_('valueOf_', 'TextLanguageOptional', 0),
    ]
    subclass = None
    superclass = TextLanguageOptional
    def __init__(self, LanguageCode=None, valueOf_=None):
        self.original_tagname_ = None
        super(SellerInstructionFreeTextType, self).__init__(LanguageCode, valueOf_, )
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerInstructionFreeTextType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerInstructionFreeTextType.subclass:
            return SellerInstructionFreeTextType.subclass(*args_, **kwargs_)
        else:
            return SellerInstructionFreeTextType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(SellerInstructionFreeTextType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerInstructionFreeTextType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerInstructionFreeTextType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerInstructionFreeTextType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerInstructionFreeTextType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerInstructionFreeTextType'):
        super(SellerInstructionFreeTextType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='SellerInstructionFreeTextType')
    def exportChildren(self, outfile, level, namespace_='', name_='SellerInstructionFreeTextType', fromsubclass_=False, pretty_print=True):
        super(SellerInstructionFreeTextType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(SellerInstructionFreeTextType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    def validate_valueOf_(self, value):
        if ( isinstance( value, BaseStrType_ ) and 1 <= value.__len__() <= 420 ):
            pass
        else:
            raise_value_error( value, 'Expected value between 1..420 characters' )
        return value
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        self.validate_valueOf_(self.valueOf_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
# end class SellerInstructionFreeTextType


class SellerInvoiceTypeDetailsType(GeneratedsSuper):
    member_data_items_ = [
        MemberSpec_('SellerInvoiceTypeText', 'SellerInvoiceTypeTextType', 0, 0, {'name': 'SellerInvoiceTypeText', 'type': 'SellerInvoiceTypeTextType'}, None),
        MemberSpec_('SellerInvoiceIdentifierText', 'SellerInvoiceIdentifierTextType3', 1, 0, {'name': 'SellerInvoiceIdentifierText', 'maxOccurs': '2', 'type': 'SellerInvoiceIdentifierTextType3'}, None),
    ]
    subclass = None
    superclass = None
    def __init__(self, SellerInvoiceTypeText=None, SellerInvoiceIdentifierText=None):
        self.original_tagname_ = None
        self.SellerInvoiceTypeText = SellerInvoiceTypeText
        if SellerInvoiceIdentifierText is None:
            self.SellerInvoiceIdentifierText = []
        else:
            self.SellerInvoiceIdentifierText = SellerInvoiceIdentifierText
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerInvoiceTypeDetailsType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerInvoiceTypeDetailsType.subclass:
            return SellerInvoiceTypeDetailsType.subclass(*args_, **kwargs_)
        else:
            return SellerInvoiceTypeDetailsType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SellerInvoiceTypeText(self): return self.SellerInvoiceTypeText
    def set_SellerInvoiceTypeText(self, SellerInvoiceTypeText): self.SellerInvoiceTypeText = SellerInvoiceTypeText
    def get_SellerInvoiceIdentifierText(self): return self.SellerInvoiceIdentifierText
    def set_SellerInvoiceIdentifierText(self, SellerInvoiceIdentifierText): self.SellerInvoiceIdentifierText = SellerInvoiceIdentifierText
    def add_SellerInvoiceIdentifierText(self, value): self.SellerInvoiceIdentifierText.append(value)
    def insert_SellerInvoiceIdentifierText_at(self, index, value): self.SellerInvoiceIdentifierText.insert(index, value)
    def replace_SellerInvoiceIdentifierText_at(self, index, value): self.SellerInvoiceIdentifierText[index] = value
    def hasContent_(self):
        if (
            self.SellerInvoiceTypeText is not None or
            self.SellerInvoiceIdentifierText
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerInvoiceTypeDetailsType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerInvoiceTypeDetailsType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerInvoiceTypeDetailsType')
        if self.hasContent_():
            outfile.write('>%s' % (eol_, ))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerInvoiceTypeDetailsType', pretty_print=pretty_print)
            showIndent(outfile, level, pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerInvoiceTypeDetailsType'):
        pass
    def exportChildren(self, outfile, level, namespace_='', name_='SellerInvoiceTypeDetailsType', fromsubclass_=False, pretty_print=True):
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.SellerInvoiceTypeText is not None:
            self.SellerInvoiceTypeText.export(outfile, level, namespace_, name_='SellerInvoiceTypeText', pretty_print=pretty_print)
        for SellerInvoiceIdentifierText_ in self.SellerInvoiceIdentifierText:
            SellerInvoiceIdentifierText_.export(outfile, level, namespace_, name_='SellerInvoiceIdentifierText', pretty_print=pretty_print)
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        pass
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SellerInvoiceTypeText':
            obj_ = SellerInvoiceTypeTextType.factory()
            obj_.build(child_)
            self.SellerInvoiceTypeText = obj_
            obj_.original_tagname_ = 'SellerInvoiceTypeText'
        elif nodeName_ == 'SellerInvoiceIdentifierText':
            obj_ = SellerInvoiceIdentifierTextType3.factory()
            obj_.build(child_)
            self.SellerInvoiceIdentifierText.append(obj_)
            obj_.original_tagname_ = 'SellerInvoiceIdentifierText'
    def validate_SellerInvoiceIdentifierTextType3(self, value):
        if ( value.__len__() <= 2 ):
            pass
        else:
            raise_value_error( value, 'Expected maximum of 2 elements' )
        return value
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        if nodeName_ == 'SellerInvoiceTypeText':
            obj_ = SellerInvoiceTypeTextType.factory()
            obj_.build(child_)
            self.SellerInvoiceTypeText = obj_
            obj_.original_tagname_ = 'SellerInvoiceTypeText'
        elif nodeName_ == 'SellerInvoiceIdentifierText':
            obj_ = SellerInvoiceIdentifierTextType3.factory()
            obj_.build(child_)
            self.SellerInvoiceIdentifierText.append(obj_)
            self.validate_SellerInvoiceIdentifierTextType3(self.SellerInvoiceIdentifierText);
            obj_.original_tagname_ = 'SellerInvoiceIdentifierText'
# end class SellerInvoiceTypeDetailsType


class SellerInvoiceTypeTextType(TextLanguageRequired):
    member_data_items_ = [
        MemberSpec_('valueOf_', 'TextLanguageRequired', 0),
    ]
    subclass = None
    superclass = TextLanguageRequired
    def __init__(self, LanguageCode=None, valueOf_=None):
        self.original_tagname_ = None
        super(SellerInvoiceTypeTextType, self).__init__(LanguageCode, valueOf_, )
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerInvoiceTypeTextType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerInvoiceTypeTextType.subclass:
            return SellerInvoiceTypeTextType.subclass(*args_, **kwargs_)
        else:
            return SellerInvoiceTypeTextType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(SellerInvoiceTypeTextType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerInvoiceTypeTextType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerInvoiceTypeTextType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerInvoiceTypeTextType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerInvoiceTypeTextType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerInvoiceTypeTextType'):
        super(SellerInvoiceTypeTextType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='SellerInvoiceTypeTextType')
    def exportChildren(self, outfile, level, namespace_='', name_='SellerInvoiceTypeTextType', fromsubclass_=False, pretty_print=True):
        super(SellerInvoiceTypeTextType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(SellerInvoiceTypeTextType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    def validate_valueOf_(self, value):
        if ( isinstance( value, BaseStrType_ ) and value.__len__() <= 35 ):
            pass
        else:
            raise_value_error( value, 'Expected value less than 35 characters' )
        return value
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        self.validate_valueOf_(self.valueOf_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
# end class SellerInvoiceTypeTextType


class SellerInvoiceIdentifierTextType(TextLanguageRequired):
    member_data_items_ = [
        MemberSpec_('SellerInvoiceIdentifierType', 'SellerInvoiceIdentifierTypeCode', 0, 1, {'use': 'optional'}),
        MemberSpec_('SellerInvoiceIdentifierMinLength', 'xs:integer', 0, 1, {'use': 'optional'}),
        MemberSpec_('SellerInvoiceIdentifierMaxLength', 'xs:integer', 0, 1, {'use': 'optional'}),
        MemberSpec_('SellerInvoiceIdentifierSpaces', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('SellerInvoiceIdentifierHyphens', 'xs:boolean', 0, 1, {'use': 'optional'}),
        MemberSpec_('valueOf_', 'TextLanguageRequired', 0),
    ]
    subclass = None
    superclass = TextLanguageRequired
    def __init__(self, LanguageCode=None, SellerInvoiceIdentifierType=None, SellerInvoiceIdentifierMinLength=1, SellerInvoiceIdentifierMaxLength=35, SellerInvoiceIdentifierSpaces=False, SellerInvoiceIdentifierHyphens=False, valueOf_=None, extensiontype_=None):
        self.original_tagname_ = None
        super(SellerInvoiceIdentifierTextType, self).__init__(LanguageCode, valueOf_, extensiontype_, )
        self.SellerInvoiceIdentifierType = _cast(None, SellerInvoiceIdentifierType)
        self.SellerInvoiceIdentifierMinLength = _cast(int, SellerInvoiceIdentifierMinLength)
        self.SellerInvoiceIdentifierMaxLength = _cast(int, SellerInvoiceIdentifierMaxLength)
        self.SellerInvoiceIdentifierSpaces = _cast(bool, SellerInvoiceIdentifierSpaces)
        self.SellerInvoiceIdentifierHyphens = _cast(bool, SellerInvoiceIdentifierHyphens)
        self.valueOf_ = valueOf_
        self.extensiontype_ = extensiontype_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerInvoiceIdentifierTextType)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerInvoiceIdentifierTextType.subclass:
            return SellerInvoiceIdentifierTextType.subclass(*args_, **kwargs_)
        else:
            return SellerInvoiceIdentifierTextType(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_SellerInvoiceIdentifierType(self): return self.SellerInvoiceIdentifierType
    def set_SellerInvoiceIdentifierType(self, SellerInvoiceIdentifierType): self.SellerInvoiceIdentifierType = SellerInvoiceIdentifierType
    def get_SellerInvoiceIdentifierMinLength(self): return self.SellerInvoiceIdentifierMinLength
    def set_SellerInvoiceIdentifierMinLength(self, SellerInvoiceIdentifierMinLength): self.SellerInvoiceIdentifierMinLength = SellerInvoiceIdentifierMinLength
    def get_SellerInvoiceIdentifierMaxLength(self): return self.SellerInvoiceIdentifierMaxLength
    def set_SellerInvoiceIdentifierMaxLength(self, SellerInvoiceIdentifierMaxLength): self.SellerInvoiceIdentifierMaxLength = SellerInvoiceIdentifierMaxLength
    def get_SellerInvoiceIdentifierSpaces(self): return self.SellerInvoiceIdentifierSpaces
    def set_SellerInvoiceIdentifierSpaces(self, SellerInvoiceIdentifierSpaces): self.SellerInvoiceIdentifierSpaces = SellerInvoiceIdentifierSpaces
    def get_SellerInvoiceIdentifierHyphens(self): return self.SellerInvoiceIdentifierHyphens
    def set_SellerInvoiceIdentifierHyphens(self, SellerInvoiceIdentifierHyphens): self.SellerInvoiceIdentifierHyphens = SellerInvoiceIdentifierHyphens
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def get_extensiontype_(self): return self.extensiontype_
    def set_extensiontype_(self, extensiontype_): self.extensiontype_ = extensiontype_
    def validate_SellerInvoiceIdentifierTypeCode(self, value):
        # Validate type SellerInvoiceIdentifierTypeCode, a restriction on xs:NMTOKEN.
        if value is not None and Validate_simpletypes_:
            value = str(value)
            enumerations = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '99']
            enumeration_respectee = False
            for enum in enumerations:
                if value == enum:
                    enumeration_respectee = True
                    break
            if not enumeration_respectee:
                warnings_.warn('Value "%(value)s" does not match xsd enumeration restriction on SellerInvoiceIdentifierTypeCode' % {"value" : value.encode("utf-8")} )
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(SellerInvoiceIdentifierTextType, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerInvoiceIdentifierTextType', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerInvoiceIdentifierTextType')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerInvoiceIdentifierTextType')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerInvoiceIdentifierTextType', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerInvoiceIdentifierTextType'):
        super(SellerInvoiceIdentifierTextType, self).exportAttributes(outfile, level, already_processed, namespace_, name_='SellerInvoiceIdentifierTextType')
        if self.SellerInvoiceIdentifierType is not None and 'SellerInvoiceIdentifierType' not in already_processed:
            already_processed.add('SellerInvoiceIdentifierType')
            outfile.write(' SellerInvoiceIdentifierType=%s' % (quote_attrib(self.SellerInvoiceIdentifierType), ))
        if self.SellerInvoiceIdentifierMinLength != 1 and 'SellerInvoiceIdentifierMinLength' not in already_processed:
            already_processed.add('SellerInvoiceIdentifierMinLength')
            outfile.write(' SellerInvoiceIdentifierMinLength="%s"' % self.gds_format_integer(self.SellerInvoiceIdentifierMinLength, input_name='SellerInvoiceIdentifierMinLength'))
        if self.SellerInvoiceIdentifierMaxLength != 35 and 'SellerInvoiceIdentifierMaxLength' not in already_processed:
            already_processed.add('SellerInvoiceIdentifierMaxLength')
            outfile.write(' SellerInvoiceIdentifierMaxLength="%s"' % self.gds_format_integer(self.SellerInvoiceIdentifierMaxLength, input_name='SellerInvoiceIdentifierMaxLength'))
        if self.SellerInvoiceIdentifierSpaces and 'SellerInvoiceIdentifierSpaces' not in already_processed:
            already_processed.add('SellerInvoiceIdentifierSpaces')
            outfile.write(' SellerInvoiceIdentifierSpaces="%s"' % self.gds_format_boolean(self.SellerInvoiceIdentifierSpaces, input_name='SellerInvoiceIdentifierSpaces'))
        if self.SellerInvoiceIdentifierHyphens and 'SellerInvoiceIdentifierHyphens' not in already_processed:
            already_processed.add('SellerInvoiceIdentifierHyphens')
            outfile.write(' SellerInvoiceIdentifierHyphens="%s"' % self.gds_format_boolean(self.SellerInvoiceIdentifierHyphens, input_name='SellerInvoiceIdentifierHyphens'))
        if self.extensiontype_ is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            outfile.write(' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"')
            outfile.write(' xsi:type="%s"' % self.extensiontype_)
    def exportChildren(self, outfile, level, namespace_='', name_='SellerInvoiceIdentifierTextType', fromsubclass_=False, pretty_print=True):
        super(SellerInvoiceIdentifierTextType, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        value = find_attr_value_('SellerInvoiceIdentifierType', node)
        if value is not None and 'SellerInvoiceIdentifierType' not in already_processed:
            already_processed.add('SellerInvoiceIdentifierType')
            self.SellerInvoiceIdentifierType = value
            self.validate_SellerInvoiceIdentifierTypeCode(self.SellerInvoiceIdentifierType)    # validate type SellerInvoiceIdentifierTypeCode
        value = find_attr_value_('SellerInvoiceIdentifierMinLength', node)
        if value is not None and 'SellerInvoiceIdentifierMinLength' not in already_processed:
            already_processed.add('SellerInvoiceIdentifierMinLength')
            try:
                self.SellerInvoiceIdentifierMinLength = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('SellerInvoiceIdentifierMaxLength', node)
        if value is not None and 'SellerInvoiceIdentifierMaxLength' not in already_processed:
            already_processed.add('SellerInvoiceIdentifierMaxLength')
            try:
                self.SellerInvoiceIdentifierMaxLength = int(value)
            except ValueError as exp:
                raise_parse_error(node, 'Bad integer attribute: %s' % exp)
        value = find_attr_value_('SellerInvoiceIdentifierSpaces', node)
        if value is not None and 'SellerInvoiceIdentifierSpaces' not in already_processed:
            already_processed.add('SellerInvoiceIdentifierSpaces')
            if value in ('true', '1'):
                self.SellerInvoiceIdentifierSpaces = True
            elif value in ('false', '0'):
                self.SellerInvoiceIdentifierSpaces = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('SellerInvoiceIdentifierHyphens', node)
        if value is not None and 'SellerInvoiceIdentifierHyphens' not in already_processed:
            already_processed.add('SellerInvoiceIdentifierHyphens')
            if value in ('true', '1'):
                self.SellerInvoiceIdentifierHyphens = True
            elif value in ('false', '0'):
                self.SellerInvoiceIdentifierHyphens = False
            else:
                raise_parse_error(node, 'Bad boolean attribute')
        value = find_attr_value_('xsi:type', node)
        if value is not None and 'xsi:type' not in already_processed:
            already_processed.add('xsi:type')
            self.extensiontype_ = value
        super(SellerInvoiceIdentifierTextType, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
# end class SellerInvoiceIdentifierTextType


class SellerInvoiceIdentifierTextType3(SellerInvoiceIdentifierTextType):
    member_data_items_ = [
        MemberSpec_('valueOf_', 'SellerInvoiceIdentifierTextType', 0),
    ]
    subclass = None
    superclass = SellerInvoiceIdentifierTextType
    def __init__(self, LanguageCode=None, SellerInvoiceIdentifierType=None, SellerInvoiceIdentifierMinLength=1, SellerInvoiceIdentifierMaxLength=35, SellerInvoiceIdentifierSpaces=False, SellerInvoiceIdentifierHyphens=False, valueOf_=None):
        self.original_tagname_ = None
        super(SellerInvoiceIdentifierTextType3, self).__init__(LanguageCode, SellerInvoiceIdentifierType, SellerInvoiceIdentifierMinLength, SellerInvoiceIdentifierMaxLength, SellerInvoiceIdentifierSpaces, SellerInvoiceIdentifierHyphens, valueOf_, )
        self.valueOf_ = valueOf_
    def factory(*args_, **kwargs_):
        if CurrentSubclassModule_ is not None:
            subclass = getSubclassFromModule_(
                CurrentSubclassModule_, SellerInvoiceIdentifierTextType3)
            if subclass is not None:
                return subclass(*args_, **kwargs_)
        if SellerInvoiceIdentifierTextType3.subclass:
            return SellerInvoiceIdentifierTextType3.subclass(*args_, **kwargs_)
        else:
            return SellerInvoiceIdentifierTextType3(*args_, **kwargs_)
    factory = staticmethod(factory)
    def get_valueOf_(self): return self.valueOf_
    def set_valueOf_(self, valueOf_): self.valueOf_ = valueOf_
    def hasContent_(self):
        if (
            (1 if type(self.valueOf_) in [int,float] else self.valueOf_) or
            super(SellerInvoiceIdentifierTextType3, self).hasContent_()
        ):
            return True
        else:
            return False
    def export(self, outfile, level, namespace_='', name_='SellerInvoiceIdentifierTextType3', namespacedef_='', pretty_print=True):
        imported_ns_def_ = GenerateDSNamespaceDefs_.get('SellerInvoiceIdentifierTextType3')
        if imported_ns_def_ is not None:
            namespacedef_ = imported_ns_def_
        if pretty_print:
            eol_ = '\n'
        else:
            eol_ = ''
        if self.original_tagname_ is not None:
            name_ = self.original_tagname_
        showIndent(outfile, level, pretty_print)
        outfile.write('<%s%s%s' % (namespace_, name_, namespacedef_ and ' ' + namespacedef_ or '', ))
        already_processed = set()
        self.exportAttributes(outfile, level, already_processed, namespace_, name_='SellerInvoiceIdentifierTextType3')
        if self.hasContent_():
            outfile.write('>')
            outfile.write(self.convert_unicode(self.valueOf_))
            self.exportChildren(outfile, level + 1, namespace_='', name_='SellerInvoiceIdentifierTextType3', pretty_print=pretty_print)
            outfile.write('</%s%s>%s' % (namespace_, name_, eol_))
        else:
            outfile.write('/>%s' % (eol_, ))
    def exportAttributes(self, outfile, level, already_processed, namespace_='', name_='SellerInvoiceIdentifierTextType3'):
        super(SellerInvoiceIdentifierTextType3, self).exportAttributes(outfile, level, already_processed, namespace_, name_='SellerInvoiceIdentifierTextType3')
    def exportChildren(self, outfile, level, namespace_='', name_='SellerInvoiceIdentifierTextType3', fromsubclass_=False, pretty_print=True):
        super(SellerInvoiceIdentifierTextType3, self).exportChildren(outfile, level, namespace_, name_, True, pretty_print=pretty_print)
        pass
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
    def buildAttributes(self, node, attrs, already_processed):
        super(SellerInvoiceIdentifierTextType3, self).buildAttributes(node, attrs, already_processed)
    def buildChildren(self, child_, node, nodeName_, fromsubclass_=False):
        pass
    def validate_valueOf_(self, value):
        if ( isinstance( value, BaseStrType_ ) and 4 <= value.__len__() <= 70 ):
            pass
        else:
            raise_value_error( value, 'Expected value between 4..70 characters' )
        return value
    def build(self, node):
        already_processed = set()
        self.buildAttributes(node, node.attrib, already_processed)
        self.valueOf_ = get_all_text_(node)
        self.validate_valueOf_(self.valueOf_)
        for child in node:
            nodeName_ = Tag_pattern_.match(child.tag).groups()[-1]
            self.buildChildren(child, node, nodeName_)
        return self
# end class SellerInvoiceIdentifierTextType3


GDSClassesMapping = {
}


USAGE_TEXT = """
Usage: python <Parser>.py [ -s ] <in_xml_file>
"""


def usage():
    print(USAGE_TEXT)
    sys.exit(1)


def get_root_tag(node):
    tag = Tag_pattern_.match(node.tag).groups()[-1]
    rootClass = GDSClassesMapping.get(tag)
    if rootClass is None:
        rootClass = globals().get(tag)
    return tag, rootClass


def parse(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FinvoiceSenderInfo'
        rootClass = FinvoiceSenderInfo
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='',
            pretty_print=True)
    return rootObj


def parseEtree(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FinvoiceSenderInfo'
        rootClass = FinvoiceSenderInfo
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    mapping = {}
    rootElement = rootObj.to_etree(None, name_=rootTag, mapping_=mapping)
    reverse_mapping = rootObj.gds_reverse_node_mapping(mapping)
    if not silence:
        content = etree_.tostring(
            rootElement, pretty_print=True,
            xml_declaration=True, encoding="utf-8")
        sys.stdout.write(content)
        sys.stdout.write('\n')
    return rootObj, rootElement, mapping, reverse_mapping


def parseString(inString, silence=False):
    if sys.version_info.major == 2:
        from StringIO import StringIO as IOBuffer
    else:
        from io import BytesIO as IOBuffer
    parser = None
    doc = parsexml_(IOBuffer(inString), parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FinvoiceSenderInfo'
        rootClass = FinvoiceSenderInfo
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('<?xml version="1.0" ?>\n')
        rootObj.export(
            sys.stdout, 0, name_=rootTag,
            namespacedef_='')
    return rootObj


def parseLiteral(inFileName, silence=False):
    parser = None
    doc = parsexml_(inFileName, parser)
    rootNode = doc.getroot()
    rootTag, rootClass = get_root_tag(rootNode)
    if rootClass is None:
        rootTag = 'FinvoiceSenderInfo'
        rootClass = FinvoiceSenderInfo
    rootObj = rootClass.factory()
    rootObj.build(rootNode)
    # Enable Python to collect the space used by the DOM.
    doc = None
    if not silence:
        sys.stdout.write('#from senderinfo import *\n\n')
        sys.stdout.write('import senderinfo as model_\n\n')
        sys.stdout.write('rootObj = model_.rootClass(\n')
        rootObj.exportLiteral(sys.stdout, 0, name_=rootTag)
        sys.stdout.write(')\n')
    return rootObj


def main():
    args = sys.argv[1:]
    if len(args) == 1:
        parse(args[0])
    else:
        usage()


if __name__ == '__main__':
    #import pdb; pdb.set_trace()
    main()


__all__ = [
    "FinvoiceSenderInfo",
    "InvoiceSenderInformationDetailsType",
    "MessageDetailsType",
    "NewSellerAccountIDType",
    "NewSellerBicType",
    "SellerAccountDetailsType",
    "SellerAccountIDType",
    "SellerAccountIDType1",
    "SellerBicType",
    "SellerBicType2",
    "SellerInstructionFreeTextType",
    "SellerInvoiceDetailsType",
    "SellerInvoiceIdentifierTextType",
    "SellerInvoiceIdentifierTextType3",
    "SellerInvoiceTypeDetailsType",
    "SellerInvoiceTypeTextType",
    "SellerOrganisationNamesType",
    "SellerPartyDetailsType",
    "SellerPostalAddressDetailsType",
    "TextLanguageOptional",
    "TextLanguageRequired",
    "date"
]
